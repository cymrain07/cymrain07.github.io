<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>「188-Q」Journeys</title>
      <link href="/2021/09/04/188-Q/"/>
      <url>/2021/09/04/188-Q/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/09/04/o7qUxj13fWIntGQ.png" alt=""><br>首先建出两颗线段树，一颗入树，一颗出树。<br>入树中连边 $(fa,son,0)$，出树中连边 $(son,fa,0)$。<br>并且两棵树中对应的节点也要连权为 $0$ 的边，代表可以从该区间重新出发。<br>每次连边时，新建一个虚拟节点，出树对应区间向虚拟节点连权为 $0$ 的边，虚拟节点向入树连权为 $1$ 的边。<br>注意无向边要连两次。<br>最后用 01-BFS 跑最短路。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 4200005</span><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>&gt; pii;<br>vector&lt;pii&gt; e[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">bool</span> w)</span> </span>&#123; e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;); &#125;<br><span class="hljs-keyword">int</span> n, m, p, tot;<br><span class="hljs-keyword">int</span> num[N], dis[N];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rt 1, 1, n</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos (pos &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos (lpos | 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bld</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">add</span>(pos + <span class="hljs-number">4</span> * n, pos, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (l == r)<br>        <span class="hljs-keyword">return</span> num[l] = pos, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>    <span class="hljs-built_in">add</span>(lpos, pos, <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(rpos, pos, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">add</span>(pos + <span class="hljs-number">4</span> * n, lpos + <span class="hljs-number">4</span> * n, <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(pos + <span class="hljs-number">4</span> * n, rpos + <span class="hljs-number">4</span> * n, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">bld</span>(lson), <span class="hljs-built_in">bld</span>(rson);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">bool</span> op)</span> <span class="hljs-comment">//0 出树 1 入树</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">add</span>(pos, <span class="hljs-number">8</span> * n + tot, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">add</span>(<span class="hljs-number">8</span> * n + tot, pos + <span class="hljs-number">4</span> * n, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (L &lt;= mid)<br>        <span class="hljs-built_in">Add</span>(lson, L, R, op);<br>    <span class="hljs-keyword">if</span> (R &gt; mid)<br>        <span class="hljs-built_in">Add</span>(rson, L, R, op);<br>&#125;<br>deque&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS_01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    dis[num[p]] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push_back</span>(num[p]);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-keyword">for</span> (pii x : e[u])<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = x.first;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + x.second)<br>            &#123;<br>                dis[v] = dis[u] + x.second;<br>                <span class="hljs-keyword">if</span> (x.second == <span class="hljs-number">1</span>)<br>                    q.<span class="hljs-built_in">push_back</span>(v);<br>                <span class="hljs-keyword">else</span><br>                    q.<span class="hljs-built_in">push_front</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;p);<br>    <span class="hljs-built_in">bld</span>(rt);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        tot++;<br>        <span class="hljs-keyword">int</span> a, b, c, d;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);<br>        <span class="hljs-built_in">Add</span>(rt, a, b, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">Add</span>(rt, c, d, <span class="hljs-number">1</span>);<br>        tot++;<br>        <span class="hljs-built_in">Add</span>(rt, a, b, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">Add</span>(rt, c, d, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">BFS_01</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == p)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dis[num[i] + <span class="hljs-number">4</span> * n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 线段树优化建图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「#137」小Z的袜子</title>
      <link href="/2021/08/30/137/"/>
      <url>/2021/08/30/137/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="45d5ac5405bbfc7f48206ef8e2165060ab29b7cab8f7abbd79a5aa6a2ccf885b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫队 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 概率期望 </tag>
            
            <tag> 排列组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R6」Dash Speed</title>
      <link href="/2021/08/29/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR6-T4/"/>
      <url>/2021/08/29/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR6-T4/</url>
      
        <content type="html"><![CDATA[<p>将每条边都存在线段树的 $[l_i,r_i]$ 区间上。<br>DFS 这颗线段树，在 DFS 过程中将每条边对应的两个节点用并查集合并，并维护合并后树的最长链。<br>最长链的两个点一定在合并前两棵树的四个点中，分类讨论维护。使用树链剖分/倍增求 LCA。<br>到达叶子节点后最长链即为对应节点答案。<br>回溯的时候要把操作撤销，所以要写可撤销并查集。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 70005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">namespace</span> IO<br>&#123;<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>            d = c, c = <span class="hljs-built_in">getchar</span>();<br>        <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>            x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            x = -x;<br>    &#125;<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>            <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>        <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>        <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> IO;<br><span class="hljs-keyword">int</span> n, m, u[N], v[N], l[N], r[N], ans[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><span class="hljs-keyword">namespace</span> HLD<br>&#123;<br>    <span class="hljs-keyword">int</span> fa[N], top[N], siz[N], son[N], dep[N];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function">    </span>&#123;<br>        siz[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (dep[v])<br>                <span class="hljs-keyword">continue</span>;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            fa[v] = u;<br>            <span class="hljs-built_in">dfs1</span>(v);<br>            siz[u] += siz[v];<br>            <span class="hljs-keyword">if</span> (siz[son[u]] &lt; siz[v])<br>                son[u] = v;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> topf)</span></span><br><span class="hljs-function">    </span>&#123;<br>        top[u] = topf;<br>        <span class="hljs-keyword">if</span> (!son[u])<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">dfs2</span>(son[u], topf);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>            <span class="hljs-keyword">if</span> (v != fa[u] &amp;&amp; v != son[u])<br>                <span class="hljs-built_in">dfs2</span>(v, v);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span> (top[x] != top[y])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]])<br>                <span class="hljs-built_in">swap</span>(x, y);<br>            x = fa[top[x]];<br>        &#125;<br>        <span class="hljs-keyword">return</span> dep[x] &lt; dep[y] ? x : y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> dep[x] + dep[y] - <span class="hljs-number">2</span> * dep[<span class="hljs-built_in">lca</span>(x, y)]; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span> </span>&#123; dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); &#125;<br>&#125;<br><span class="hljs-keyword">using</span> HLD::dis;<br>stack&lt;<span class="hljs-keyword">int</span>&gt; ans1;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">UFS</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> a, b, w, fa, siz;<br>        <span class="hljs-built_in">node</span>() &#123;&#125;<br>        <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> _, <span class="hljs-keyword">int</span> __, <span class="hljs-keyword">int</span> ___, <span class="hljs-keyword">int</span> ____, <span class="hljs-keyword">int</span> _____)<br>        &#123;<br>            a = _, b = __, w = ___, fa = ____, siz = _____;<br>        &#125;<br>        node <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> node &amp;y) <span class="hljs-keyword">const</span><br>        &#123;<br>            node res = <span class="hljs-built_in">node</span>(a, b, w, fa, siz + y.siz);<br>            <span class="hljs-keyword">if</span> (y.w &gt; w)<br>                res.w = y.w, res.a = y.a, res.b = y.b;<br>            <span class="hljs-keyword">int</span> tmp;<br>            tmp = <span class="hljs-built_in">dis</span>(a, y.a);<br>            <span class="hljs-keyword">if</span> (tmp &gt; res.w)<br>                res.a = a, res.b = y.a, res.w = tmp;<br>            tmp = <span class="hljs-built_in">dis</span>(a, y.b);<br>            <span class="hljs-keyword">if</span> (tmp &gt; res.w)<br>                res.a = a, res.b = y.b, res.w = tmp;<br>            tmp = <span class="hljs-built_in">dis</span>(b, y.a);<br>            <span class="hljs-keyword">if</span> (tmp &gt; res.w)<br>                res.a = b, res.b = y.a, res.w = tmp;<br>            tmp = <span class="hljs-built_in">dis</span>(b, y.b);<br>            <span class="hljs-keyword">if</span> (tmp &gt; res.w)<br>                res.a = b, res.b = y.b, res.w = tmp;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125; s[N];<br>    <span class="hljs-built_in">UFS</span>()<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>            s[i] = <span class="hljs-built_in">node</span>(i, i, <span class="hljs-number">0</span>, i, <span class="hljs-number">1</span>);<br>        ans1.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    stack&lt;pair&lt;node, <span class="hljs-keyword">int</span>&gt;&gt; stk;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x == s[x].fa ? x : <span class="hljs-built_in">find</span>(s[x].fa); &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mrg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = <span class="hljs-built_in">find</span>(x), y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (s[x].siz &gt; s[y].siz)<br>            <span class="hljs-built_in">swap</span>(x, y);<br>        <span class="hljs-keyword">if</span> (x == y)<br>        &#123;<br>            ans1.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">max</span>(ans1.<span class="hljs-built_in">top</span>(), s[y].w));<br>            stk.<span class="hljs-built_in">push</span>(&#123;s[y], <span class="hljs-number">-1</span>&#125;), stk.<span class="hljs-built_in">push</span>(&#123;s[x], <span class="hljs-number">-1</span>&#125;);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        stk.<span class="hljs-built_in">push</span>(&#123;s[x], x&#125;);<br>        stk.<span class="hljs-built_in">push</span>(&#123;s[y], y&#125;);<br>        s[y] = s[y] + s[x];<br>        s[x].fa = y;<br>        ans1.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">max</span>(ans1.<span class="hljs-built_in">top</span>(), s[y].w));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ans1.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (stk.<span class="hljs-built_in">top</span>().second != <span class="hljs-number">-1</span>)<br>            s[stk.<span class="hljs-built_in">top</span>().second] = stk.<span class="hljs-built_in">top</span>().first;<br>        stk.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (stk.<span class="hljs-built_in">top</span>().second != <span class="hljs-number">-1</span>)<br>            s[stk.<span class="hljs-built_in">top</span>().second] = stk.<span class="hljs-built_in">top</span>().first;<br>        stk.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125; S;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_Tree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rt 1, 1, n</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; tr[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> tr[pos].<span class="hljs-built_in">push_back</span>(i), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (L &lt;= mid)<br>            <span class="hljs-built_in">ins</span>(lson, L, R, i);<br>        <span class="hljs-keyword">if</span> (R &gt; mid)<br>            <span class="hljs-built_in">ins</span>(rson, L, R, i);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">vis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : tr[pos])<br>            S.<span class="hljs-built_in">mrg</span>(u[i], v[i]);<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            ans[l] = ans1.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">vis</span>(lson), <span class="hljs-built_in">vis</span>(rson);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tr[pos].<span class="hljs-built_in">size</span>(); i++)<br>            S.<span class="hljs-built_in">undo</span>();<br>    &#125;<br>&#125; T;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;speed&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(u[i]), <span class="hljs-built_in">read</span>(v[i]), <span class="hljs-built_in">read</span>(l[i]), <span class="hljs-built_in">read</span>(r[i]);<br>        e[u[i]].<span class="hljs-built_in">push_back</span>(v[i]);<br>        e[v[i]].<span class="hljs-built_in">push_back</span>(u[i]);<br>        T.<span class="hljs-built_in">ins</span>(rt, l[i], r[i], i);<br>    &#125;<br>    HLD::<span class="hljs-built_in">pre</span>();<br>    T.<span class="hljs-built_in">vis</span>(rt);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> q;<br>        <span class="hljs-built_in">read</span>(q);<br>        <span class="hljs-built_in">wtln</span>(ans[q]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> LCA </tag>
            
            <tag> 可撤销并查集 </tag>
            
            <tag> 线段树分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R6」Walk</title>
      <link href="/2021/08/29/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR6-T3/"/>
      <url>/2021/08/29/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR6-T3/</url>
      
        <content type="html"><![CDATA[<p>新建 $2^{20}$ 个虚拟节点，对于一个点 $x$，向所有位上比它只少一个 $1$ 的虚拟节点连权值为 $0$ 的边。<br>$i$ 向 $\textit{val}(i)$ 连权值为 $1$ 的边，$\textit{val}(i)$ 向 $i$ 连权值为 $0$ 的边。（或者反过来）<br>这样就保证了当 $x\space\And\space y=y$ 时有边 $(x,y,1)$。<br>用 01-BFS 跑最短路即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> X = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>) - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> n, m, val[N], dis[N + X];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>&#125;;<br>vector&lt;edge&gt; e[N + X];<br>deque&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    dis[<span class="hljs-number">1</span> + X] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span> + X);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-keyword">if</span> (u &lt;= X)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">19</span>; i++)<br>                <span class="hljs-keyword">if</span> ((u &gt;&gt; i) &amp; <span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-keyword">int</span> v = u - (<span class="hljs-number">1</span> &lt;&lt; i);<br>                    <span class="hljs-keyword">if</span> (v == <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u])<br>                        dis[v] = dis[u], q.<span class="hljs-built_in">push_front</span>(u - (<span class="hljs-number">1</span> &lt;&lt; i));<br>                &#125;<br>        <span class="hljs-keyword">for</span> (edge x : e[u])<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = x.v;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + x.w)<br>            &#123;<br>                dis[v] = dis[u] + x.w;<br>                <span class="hljs-keyword">if</span> (x.w == <span class="hljs-number">1</span>)<br>                    q.<span class="hljs-built_in">push_back</span>(v);<br>                <span class="hljs-keyword">else</span><br>                    q.<span class="hljs-built_in">push_front</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;walk&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(val[i]);<br>        e[i + X].<span class="hljs-built_in">push_back</span>(&#123;val[i], <span class="hljs-number">1</span>&#125;);<br>        e[val[i]].<span class="hljs-built_in">push_back</span>(&#123;i + X, <span class="hljs-number">0</span>&#125;);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v; i &lt;= m; i++)<br>        <span class="hljs-built_in">read</span>(u), <span class="hljs-built_in">read</span>(v), e[u + X].<span class="hljs-built_in">push_back</span>(&#123;v + X, <span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-built_in">bfs</span>();<br>    <span class="hljs-built_in">wtln</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (dis[i + X] == <span class="hljs-number">0x3f3f3f3f</span>)<br>            <span class="hljs-built_in">wtln</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">wtln</span>(dis[i + X]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R6」String Master</title>
      <link href="/2021/08/29/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR6-T2/"/>
      <url>/2021/08/29/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR6-T2/</url>
      
        <content type="html"><![CDATA[<p>首先枚举一个字符串位置相对于另一个的偏移值 $d$（$d\in(-n,n)$）。<br>再枚举每一个位置，如果两字符串该位置不同则加进队列。<br>如果队列大小 $&gt;k$，则更新答案：答案为队首下一个位置与队尾的子串长度。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtailn</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> n, K, ans, head, tail, q[N];<br>string s, t;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;master&quot;</span>);<br>    q[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(K);<br>    cin &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d = <span class="hljs-number">0</span>; d &lt; n; ++d)<br>    &#123;<br>        head = <span class="hljs-number">1</span>, tail = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - d; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (s[i] != t[i + d])<br>                q[++tail] = i;<br>            <span class="hljs-keyword">if</span> (tail - head == K)<br>                head++;<br>            ans = <span class="hljs-built_in">max</span>(ans, i - q[head - <span class="hljs-number">1</span>]);<br>        &#125;<br>        head = <span class="hljs-number">1</span>, tail = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - d; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (t[i] != s[i + d])<br>                q[++tail] = i;<br>            <span class="hljs-keyword">if</span> (tail - head == K)<br>                head++;<br>            ans = <span class="hljs-built_in">max</span>(ans, i - q[head - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">wt</span>(ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R6」赛后总结</title>
      <link href="/2021/08/29/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR6-%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/29/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR6-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><del>本场比赛不会任何题，全部暴力</del></p><ul><li>T1 写了 $60$ 分 01 背包。</li><li>T2 写了 $40$ 分 $O(n^3)$ DP。</li><li>T3 写了 $40$ 分 BFS。</li></ul><p>预估得分：$60+40+40=140$。<br>实际得分：$60+40+40=140$。<br>总算考完了啊。</p><hr><p>题解：</p><ul><li><a href="https://cymrain07.github.io/2021/08/29/NOIP模拟赛-T2/">T2 String Master</a></li><li><a href="https://cymrain07.github.io/2021/08/29/NOIP模拟赛-T3/">T3 Walk</a></li><li><a href="https://cymrain07.github.io/2021/08/29/NOIP模拟赛-T4/">T4 Dash Speed</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 赛后总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R5」number</title>
      <link href="/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-T4/"/>
      <url>/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-T4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 二分答案 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R5」mod</title>
      <link href="/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-T3/"/>
      <url>/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-T3/</url>
      
        <content type="html"><![CDATA[<p>区间求和和单点修改都是线段树板子，问题是区间取模。<br>维护每个区间的最大值 $\textit{mx}$，只有$\textit{mx}\geq x$ 时才有必要进行修改。<br><del>易证</del>每次取模时，如果 $a(i)\geq x$，那么 $a(i)$ 至少减少一半，所以每个点最多修改 $\log a(i)$ 次。<br>时间复杂度 $O(n\log^2n)$</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">int</span> a[N], n, m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegmentTree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rt 1, 1, n</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> mx;<br>        ll sum;<br>        <span class="hljs-built_in">node</span>() &#123;&#125;<br>        <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> val) &#123; mx = sum = val; &#125;<br>        node <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> node &amp;x) <span class="hljs-keyword">const</span><br>        &#123;<br>            node res;<br>            res.mx = <span class="hljs-built_in">max</span>(mx, x.mx);<br>            res.sum = sum + x.sum;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125; tr[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span> </span>&#123; tr[pos] = tr[lpos] + tr[rpos]; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bld</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span> tr[pos] = a[l], <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">bld</span>(lson), <span class="hljs-built_in">bld</span>(rson), <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> tr[pos].sum;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (R &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R);<br>        <span class="hljs-keyword">if</span> (L &gt; mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(rson, L, R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R) + <span class="hljs-built_in">qry</span>(rson, L, R);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == p &amp;&amp; r == p)<br>            <span class="hljs-keyword">return</span> tr[pos] = v, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (p &lt;= mid)<br>            <span class="hljs-built_in">upd</span>(lson, p, v);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">upd</span>(rson, p, v);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> mod)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span> tr[pos].mx %= mod, tr[pos].sum %= mod, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (tr[lpos].mx &gt;= mod &amp;&amp; L &lt;= mid)<br>            <span class="hljs-built_in">Mod</span>(lson, L, R, mod);<br>        <span class="hljs-keyword">if</span> (tr[rpos].mx &gt;= mod &amp;&amp; R &gt; mid)<br>            <span class="hljs-built_in">Mod</span>(rson, L, R, mod);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>&#125; T;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;mod&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">read</span>(a[i]);<br>    T.<span class="hljs-built_in">bld</span>(rt);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> op;<br>        <span class="hljs-built_in">read</span>(op);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> l, r;<br>            <span class="hljs-built_in">read</span>(l), <span class="hljs-built_in">read</span>(r);<br>            <span class="hljs-built_in">wtln</span>(T.<span class="hljs-built_in">qry</span>(rt, l, r));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> l, r, x;<br>            <span class="hljs-built_in">read</span>(l), <span class="hljs-built_in">read</span>(r), <span class="hljs-built_in">read</span>(x);<br>            T.<span class="hljs-built_in">Mod</span>(rt, l, r, x);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> k, y;<br>            <span class="hljs-built_in">read</span>(k), <span class="hljs-built_in">read</span>(y);<br>            T.<span class="hljs-built_in">upd</span>(rt, k, y);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R5」Tourist Attractions</title>
      <link href="/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-T2/"/>
      <url>/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-T2/</url>
      
        <content type="html"><![CDATA[<p>用 <code>bitset</code> 维护每个点相邻的点。<br>首先枚举中间的那条边 $(i,j)$。<br>设 $S_i$ 为 $i$ 的邻点集合，$S_j$ 为 $j$ 的邻点集合。<br>则答案为 $(S_i$ 的大小 $-1)\times(S_j$ 的大小 $-1)\space-$ 构成环的三条边个数，即 $S_i\cap S_j$ 的大小。<br>时间复杂度 $O(\dfrac{n^3}w)$，其中 $w=32$。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1505</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        c = <span class="hljs-built_in">getchar</span>();<br>    x = c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> n, ans;<br>bitset&lt;N&gt; mp[N];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;tour&quot;</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, x; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-built_in">read</span>(x);<br>            <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>)<br>                mp[i][j] = <span class="hljs-number">1</span>;<br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j])<br>                ans += (mp[i].<span class="hljs-built_in">count</span>() - <span class="hljs-number">1</span>) * (mp[j].<span class="hljs-built_in">count</span>() - <span class="hljs-number">1</span>) - (mp[i] &amp; mp[j]).<span class="hljs-built_in">count</span>();<br>        &#125;<br>    <span class="hljs-built_in">wt</span>(ans * <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> bitset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R5」clique</title>
      <link href="/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-T1/"/>
      <url>/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-T1/</url>
      
        <content type="html"><![CDATA[<p>设数轴上 $3$ 个点 $i,j,k$，且 $x_i&lt;x_j&lt;x_k$。<br>如果存在边 $(i,j)$ 和边 $(j,k)$，则必存在边 $(i,k)$。<br>证明：</p><script type="math/tex; mode=display">\begin{aligned}\because\ x_j-x_i&\geq w_i+w_j\\x_k-x_j&\geq w_j+w_k\\\therefore\ x_k-x_i&\geq w_i+2w_j+w_k\\\therefore\ x_k-x_i&\geq w_i+w_k\end{aligned}</script><p>即存在 $(i,k)$ 这条边。<br>所以求最大团就转化为了求最长链。<br>两个点连边的要求可以转化成 $x_i-w_i\geq x_j+w_j$。<br>设 $f(i)$ 表示以 $i$ 结尾的最长链长度。</p><script type="math/tex; mode=display">f(i)=\max_{j=1}^{i-1}\{f(j),\text{if }x_i-w_i\geq x_j+w_j\}+1</script><p>用树状数组优化 DP 过程。<br>时间复杂度 $O(n\log n)$。<br>注意离散化。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> n, tot;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BIT</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> c[N &lt;&lt; <span class="hljs-number">1</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; x; x -= x &amp; -x)<br>            res = <span class="hljs-built_in">max</span>(res, c[x]);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (; x &lt;= tot; x += x &amp; -x)<br>            c[x] = <span class="hljs-built_in">max</span>(c[x], y);<br>    &#125;<br>&#125; T;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dot</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> dot &amp;y) <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">return</span> x &lt; y.x; &#125;<br>&#125; a[N];<br><span class="hljs-keyword">int</span> t[N &lt;&lt; <span class="hljs-number">1</span>], dp[N], ans;<br>unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;clique&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(a[i].x), <span class="hljs-built_in">read</span>(a[i].w);<br>        t[i] = a[i].x + a[i].w, t[i + n] = a[i].x - a[i].w;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + n * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * <span class="hljs-number">2</span>; i++)<br>        <span class="hljs-keyword">if</span> (!mp.<span class="hljs-built_in">count</span>(t[i]))<br>            mp[t[i]] = ++tot;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        dp[i] = T.<span class="hljs-built_in">qry</span>(mp[a[i].x - a[i].w]) + <span class="hljs-number">1</span>;<br>        ans = <span class="hljs-built_in">max</span>(ans, dp[i]);<br>        T.<span class="hljs-built_in">upd</span>(mp[a[i].x + a[i].w], dp[i]);<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 线性 DP </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R5」赛后总结</title>
      <link href="/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/27/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR5-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><del>论开大数组的重要性</del><br>T3 很明显是数据结构题，用线段树，取模稍想了一下可以维护区间最大值来优化。<br>然后 T2，开始想错了后来写了 BFS，但是空间会爆。<br>接着 T1，想出奇葩 DP+树状数组做法。<br>T4 神仙题。<br>预估得分：$100+40+100+0=240$<br>实际得分：$60+60+100+0=220$<br>T1 树状数组空间开小了。<br><del>挂分惨烈</del></p><hr><p>题解：</p><ul><li><a href="https://cymrain07.github.io/2021/08/27/NOIP模拟赛R5-T1/">T1 clique</a></li><li><a href="https://cymrain07.github.io/2021/08/27/NOIP模拟赛R5-T2/">T2 Tourist Attractions</a></li><li><a href="https://cymrain07.github.io/2021/08/27/NOIP模拟赛R5-T3/">T3 mod</a></li><li><a href="https://cymrain07.github.io/2021/08/27/NOIP模拟赛R5-T4/">T4 number</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 赛后总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R4」序列</title>
      <link href="/2021/08/26/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR4-T4/"/>
      <url>/2021/08/26/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR4-T4/</url>
      
        <content type="html"><![CDATA[<p>考虑单个点对所有答案的贡献，这样修改的时候只用修改一个点的贡献。<br>开一颗线段树，每个节点都是一个 <code>vector</code>。<br>插入一个询问时，按照线段树区间修改的方法，对正好在询问区间里的节点插入 $x$。<br>由于一个点 $y$ 的贡献是 $a(y)\geq x_i$ 的个数，所以先把所有 <code>vector</code> 内部排序，询问贡献时在线段树上查找，沿路把所有结点的答案都加起来即可。<br>一个节点的答案可以使用二分查找。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> n, m, q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegmentTree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rt 1, 1, n</span><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; tr[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> tr[pos].<span class="hljs-built_in">push_back</span>(x), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (L &lt;= mid)<br>            <span class="hljs-built_in">ins</span>(lson, L, R, x);<br>        <span class="hljs-keyword">if</span> (R &gt; mid)<br>            <span class="hljs-built_in">ins</span>(rson, L, R, x);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">sort</span>(tr[pos].<span class="hljs-built_in">begin</span>(), tr[pos].<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">Sort</span>(lson), <span class="hljs-built_in">Sort</span>(rson);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> res;<br>        res = <span class="hljs-built_in">upper_bound</span>(tr[pos].<span class="hljs-built_in">begin</span>(), tr[pos].<span class="hljs-built_in">end</span>(), v) - tr[pos].<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span> res;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (p &lt;= mid)<br>            res += <span class="hljs-built_in">qry</span>(lson, p, v);<br>        <span class="hljs-keyword">else</span><br>            res += <span class="hljs-built_in">qry</span>(rson, p, v);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-keyword">int</span> a[N], ans;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;seq&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m), <span class="hljs-built_in">read</span>(q);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">read</span>(a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, l, r, x; i &lt;= m; i++)<br>        <span class="hljs-built_in">read</span>(l), <span class="hljs-built_in">read</span>(r), <span class="hljs-built_in">read</span>(x), T.<span class="hljs-built_in">ins</span>(rt, l, r, x);<br>    T.<span class="hljs-built_in">Sort</span>(rt);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        a[i] = T.<span class="hljs-built_in">qry</span>(rt, i, a[i]), ans += a[i];<br>    <span class="hljs-built_in">wtln</span>(ans);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, p, v; i &lt;= q; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(p), <span class="hljs-built_in">read</span>(v);<br>        p ^= ans, v ^= ans;<br>        ans -= a[p];<br>        a[p] = T.<span class="hljs-built_in">qry</span>(rt, p, v);<br>        ans += a[p];<br>        <span class="hljs-built_in">wtln</span>(ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R4」平均数</title>
      <link href="/2021/08/26/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR4-T2/"/>
      <url>/2021/08/26/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR4-T2/</url>
      
        <content type="html"><![CDATA[<p>首先二分答案，将所有数减去二分出的答案，则问题转化为求和 $\leq 0$ 的区间个数。<br>求出前缀和 $s$，注意到一个区间 $[i,j]$ 和小于 $0$，当且仅当 $s(j)&lt;s(i-1)$。<br>所以对前缀和求逆序对的个数，用归并排序，树状数组+离散化会 TLE。<br>注意最后要加上以 $1$ 为左端点且和小于 $0$ 的区间个数，即 $s(i)&lt;0$。<br>归并排序：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 2147483647</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">int</span> n, a[N], tot = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> k;<br><span class="hljs-keyword">double</span> s[N], t[N];<br><span class="hljs-keyword">double</span> l = inf, r = -inf, ans;<br><span class="hljs-keyword">int</span> res;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">msort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">msort</span>(l, mid);<br>    <span class="hljs-built_in">msort</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">int</span> p = l, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] &gt; s[j])<br>        &#123;<br>            res = res + mid - i + <span class="hljs-number">1</span>;<br>            t[p++] = s[j++];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            t[p++] = s[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid)<br>        t[p++] = s[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r)<br>        t[p++] = s[j++];<br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= r; i++)<br>        s[i] = t[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        s[i] = s[i - <span class="hljs-number">1</span>] + a[i] - x;<br>        <span class="hljs-keyword">if</span> (s[i] &lt; <span class="hljs-number">0</span>)<br>            res1++;<br>    &#125;<br>    <span class="hljs-built_in">msort</span>(<span class="hljs-number">1</span>, n);<br>    res1 += res;<br>    <span class="hljs-keyword">return</span> res1 &gt;= k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;ave&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">read</span>(a[i]), l = <span class="hljs-built_in">min</span>(l, (<span class="hljs-keyword">double</span>)a[i]), r = <span class="hljs-built_in">max</span>(r, (<span class="hljs-keyword">double</span>)a[i]);<br>    ans = r;<br>    <span class="hljs-keyword">while</span> (r - l &gt;= eps)<br>    &#123;<br>        <span class="hljs-keyword">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>            ans = r = mid;<br>        <span class="hljs-keyword">else</span><br>            l = mid;<br>    &#125;<br>    cout &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>) &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>树状数组：（$70$ 分）</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 0x7ffffff</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-4</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span> </span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">int</span> n, a[N], tot = <span class="hljs-number">1</span>, k, b[N];<br><span class="hljs-keyword">double</span> l = inf, r = -inf, ans;<br>unordered_map&lt;<span class="hljs-keyword">double</span>, <span class="hljs-keyword">int</span>&gt; mp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sum</span> &#123;</span><br>    <span class="hljs-keyword">double</span> val;<br>    <span class="hljs-keyword">int</span> id;<br>&#125; s[N];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BIT</span> &#123;</span><br>    <span class="hljs-keyword">int</span> c[N];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(c)); &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (; x &lt;= tot; x += x &amp; -x) c[x] += v;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; x; x -= x &amp; -x) res += c[x];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125; T;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(sum x, sum y)</span> </span>&#123; <span class="hljs-keyword">return</span> x.val &lt; y.val; &#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(sum x, sum y)</span> </span>&#123; <span class="hljs-keyword">return</span> x.id &lt; y.id; &#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<br>    mp.<span class="hljs-built_in">clear</span>();<br>    T.<span class="hljs-built_in">clear</span>();<br>    tot = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        s[i].val = s[i - <span class="hljs-number">1</span>].val + a[i] - x, s[i].id = i;<br>        s[i].val = <span class="hljs-built_in">round</span>(s[i].val * <span class="hljs-number">100000</span>) * <span class="hljs-number">0.00001</span>;<br>        <span class="hljs-keyword">if</span> (s[i].val &lt; <span class="hljs-number">0</span>)<br>            res++;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(s + <span class="hljs-number">1</span>, s + n + <span class="hljs-number">1</span>, cmp1);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!mp.<span class="hljs-built_in">count</span>(s[i].val))<br>            mp[s[i].val] = ++tot;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) b[s[i].id] = mp[s[i].val];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        res += T.<span class="hljs-built_in">qry</span>(b[i] - <span class="hljs-number">1</span>);<br>        T.<span class="hljs-built_in">upd</span>(b[i], <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res &gt;= k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;ave&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">read</span>(a[i]), l = <span class="hljs-built_in">min</span>(l, (<span class="hljs-keyword">double</span>)a[i]), r = <span class="hljs-built_in">max</span>(r, (<span class="hljs-keyword">double</span>)a[i]);<br>    <span class="hljs-keyword">while</span> (r - l &gt;= eps) &#123;<br>        <span class="hljs-keyword">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>            ans = r = mid;<br>        <span class="hljs-keyword">else</span><br>            l = mid;<br>    &#125;<br>    cout &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>) &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分答案 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R4」Divisors</title>
      <link href="/2021/08/26/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR4-T1/"/>
      <url>/2021/08/26/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR4-T1/</url>
      
        <content type="html"><![CDATA[<p>求出所有数的因数插入到 <code>vector</code> 中，排序，求出每个因数出现的次数。</p><figure class="highlight plaintext"><figcaption><span><bits/stdc++.h></span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp#include">using namespace std;<br>#define IO(x) freopen(x &quot;.in&quot;, &quot;r&quot;, stdin), freopen(x &quot;.out&quot;, &quot;w&quot;, stdout)<br>template &lt;class T&gt;<br>void read(T &amp;x)<br>&#123;<br>    x = 0;<br>    char c = getchar(), d = 0;<br>    while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;)<br>        d = c, c = getchar();<br>    while (c &gt;= &#x27;0&#x27; &amp;&amp; c &lt;= &#x27;9&#x27;)<br>        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + c - &#x27;0&#x27;, c = getchar();<br>    if (d == &#x27;-&#x27;)<br>        x = -x;<br>&#125;<br>template &lt;class T&gt;<br>void wt(T x)<br>&#123;<br>    if (x / 10)<br>        wt(x / 10);<br>    putchar(x % 10 + &#x27;0&#x27;);<br>&#125;<br>template &lt;class T&gt;<br>void wtsp(T x)<br>&#123;<br>    if (x &lt; 0)<br>        putchar(&#x27;-&#x27;), x = -x;<br>    wt(x), putchar(&#x27; &#x27;);<br>&#125;<br>template &lt;class T&gt;<br>void wtln(T x)<br>&#123;<br>    if (x &lt; 0)<br>        putchar(&#x27;-&#x27;), x = -x;<br>    wt(x), putchar(&#x27;\n&#x27;);<br>&#125;<br>vector&lt;int&gt; a;<br>int n, m;<br>void Div(int x)<br>&#123;<br>    for (int i = 1; i * i &lt;= x; i++)<br>    &#123;<br>        if (x % i == 0)<br>        &#123;<br>            a.push_back(i);<br>            if (x / i != i)<br>                a.push_back(x / i);<br>        &#125;<br>    &#125;<br>&#125;<br>int ans[205], tot;<br><br>int main()<br>&#123;<br>    IO(&quot;div&quot;);<br>    read(n), read(m);<br>    for (int i = 1, x; i &lt;= m; i++)<br>    &#123;<br>        read(x);<br>        Div(x);<br>    &#125;<br>    sort(a.begin(), a.end());<br>    a.push_back(0);<br>    int cnt = 0;<br>    for (unsigned int i = 0; i &lt; a.size(); i++)<br>    &#123;<br>        if (i == 0)<br>        &#123;<br>            cnt++;<br>            continue;<br>        &#125;<br>        if (a[i] != a[i - 1])<br>        &#123;<br>            ans[cnt]++;<br>            cnt = 1;<br>            tot++;<br>            if (a[i] &gt; n)<br>                break;<br>        &#125;<br>        else<br>            cnt++;<br>    &#125;<br>    wtln(n - tot);<br>    for (int i = 1; i &lt;= m; i++)<br>        wtln(ans[i]);<br>    return 0;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「NOIP 模拟赛 R4」赛后总结</title>
      <link href="/2021/08/26/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR4-%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/26/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9BR4-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><del>爆炸了</del><br>先开的 T2，几乎推出正解，<del>但没有推出</del>。<br>回去看 T1，思考良久有了正解，$100$ 分到手。<br>接着 T4 打了 $40$ 分暴力，T3 神仙题。<br>最后 T2 $40$ 分暴力。<br>预估得分：$100+40+0+40=180$<br>实际得分：$100+12+0+40=152$<br>T2 挂了 $28$ 分。<br><del>去世了</del></p><hr><p>题解：</p><ul><li><a href="https://cymrain07.github.io/2021/08/26/NOIP模拟赛R4-T1/">T1 Divisors</a></li><li><a href="https://cymrain07.github.io/2021/08/26/NOIP模拟赛R4-T2/">T2 平均数</a></li><li><a href="https://cymrain07.github.io/2021/08/26/NOIP模拟赛R4-T4/">T4 序列</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 赛后总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#17」ウミユリ海底譚</title>
      <link href="/2021/08/25/Corn17-T2/"/>
      <url>/2021/08/25/Corn17-T2/</url>
      
        <content type="html"><![CDATA[<p>把每个点拆成两个点，$x$ 侧点和 $y$ 侧点。<br>将所有 $x$ 侧点按 $x$ 排序，连边 $(i,i+1,x_{i+1}-x_i)$。<br>将所有 $y$ 侧点按 $y$ 排序，连边 $(i,i+1,y_{i+1}-y_i)$。<br>在同一个点拆出的两个点之间连权值为 $w(i)$ 的边。<br>注意起点和终点拆出的两点间要连权值为 $0$ 的边，最后把这两点的权值加上。<br>跑最短路即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">station</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, y, w, id;<br>&#125; s[N];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpx</span><span class="hljs-params">(station x, station y)</span> </span>&#123; <span class="hljs-keyword">return</span> x.x &lt; y.x; &#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpy</span><span class="hljs-params">(station x, station y)</span> </span>&#123; <span class="hljs-keyword">return</span> x.y &lt; y.y; &#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>&#125;;<br>vector&lt;edge&gt; e[N];<br>priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;<br>ll dis[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;), e[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)<br>        dis[i] = <span class="hljs-number">9223372036854775807</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        pii x = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (dis[x.second] != x.first)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">int</span> u = x.second;<br>        <span class="hljs-keyword">for</span> (edge i : e[u])<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = i.v;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + i.w)<br>            &#123;<br>                dis[v] = dis[u] + i.w;<br>                q.<span class="hljs-built_in">push</span>(&#123;dis[v], v&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> tmp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;train&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(s[i].x), <span class="hljs-built_in">read</span>(s[i].y), <span class="hljs-built_in">read</span>(s[i].w);<br>        s[i].id = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">add</span>(i, i + n, s[i].w);<br>    tmp = s[<span class="hljs-number">1</span>].w + s[n].w;<br>    <span class="hljs-built_in">sort</span>(s + <span class="hljs-number">1</span>, s + n + <span class="hljs-number">1</span>, cmpx);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">add</span>(s[i].id, s[i + <span class="hljs-number">1</span>].id, s[i + <span class="hljs-number">1</span>].x - s[i].x);<br>    <span class="hljs-built_in">sort</span>(s + <span class="hljs-number">1</span>, s + n + <span class="hljs-number">1</span>, cmpy);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">add</span>(s[i].id + n, s[i + <span class="hljs-number">1</span>].id + n, s[i + <span class="hljs-number">1</span>].y - s[i].y);<br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(n, n * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dijkstra</span>();<br>    <span class="hljs-built_in">wtln</span>(tmp + dis[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> CornOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#17」ローリンガール</title>
      <link href="/2021/08/25/Corn17-T4/"/>
      <url>/2021/08/25/Corn17-T4/</url>
      
        <content type="html"><![CDATA[<p>首先把平面两点曼哈顿距离转化为切比雪夫距离。<br>设 $a(i)$ 表示忽略第 $i$ 座山的最大距离，其中 $a(0)$ 表示不忽略任何一座山。<br>查询直接单点查询即可。<br>新加山时，记录 $x/y$ 的 最/次 大/小 值，计算这 $8$ 个距离并取前 $2$ 大的。（取到的两座山不能是同一座）<br>设当前山为 $i$，取到的其中一座山为 $x$，距离为 $d$，则对 $[0,x-1],[x+1,i-1],[i+1,n]$ 与 $d$ 取 $\max$。<br>用线段树维护区间取 $\max$，单点修改。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2000006</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 0x7ffffff</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> m, n, lastans;<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">9</span>], d[<span class="hljs-number">9</span>], dmx1, dmx2, pmx1, pmx2;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mt</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br>&#125; a[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_Tree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rt 1, 0, m</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> now pos, l, r</span><br>    <span class="hljs-keyword">int</span> a[N], tag[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ntg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span> a[l] = <span class="hljs-built_in">max</span>(a[l], v), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        tag[pos] = <span class="hljs-built_in">max</span>(tag[pos], v);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (tag[pos] == -inf)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">ntg</span>(lson, tag[pos]), <span class="hljs-built_in">ntg</span>(rson, tag[pos]), tag[pos] = -inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">ntg</span>(now, v), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (L &lt;= mid)<br>            <span class="hljs-built_in">upd</span>(lson, L, R, v);<br>        <span class="hljs-keyword">if</span> (R &gt; mid)<br>            <span class="hljs-built_in">upd</span>(rson, L, R, v);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == p &amp;&amp; r == p)<br>            <span class="hljs-keyword">return</span> a[p];<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (p &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, p);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(rson, p);<br>    &#125;<br>&#125; T;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> d)</span></span><br><span class="hljs-function"></span>&#123;<br>    T.<span class="hljs-built_in">upd</span>(rt, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>, d), T.<span class="hljs-built_in">upd</span>(rt, i + <span class="hljs-number">1</span>, x - <span class="hljs-number">1</span>, d), T.<span class="hljs-built_in">upd</span>(rt, x + <span class="hljs-number">1</span>, m, d);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//IO(&quot;rest&quot;);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        T.a[i] = -inf;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N &lt;&lt; <span class="hljs-number">2</span>; i++)<br>        T.tag[i] = -inf;<br>    <span class="hljs-built_in">read</span>(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> op;<br>        <span class="hljs-built_in">read</span>(op);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x1, y1, h;<br>            <span class="hljs-built_in">read</span>(x1), <span class="hljs-built_in">read</span>(y1), <span class="hljs-built_in">read</span>(h);<br>            x1 ^= lastans, y1 ^= lastans, h ^= lastans;<br>            <span class="hljs-keyword">int</span> x = x1 + y1, y = x1 - y1;<br>            a[++n] = &#123;x, y&#125;;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span> || i == <span class="hljs-number">2</span> || i == <span class="hljs-number">5</span> || i == <span class="hljs-number">6</span>)<br>                    d[i] = <span class="hljs-built_in">abs</span>(x - a[p[i]].x) + h;<br>                <span class="hljs-keyword">else</span><br>                    d[i] = <span class="hljs-built_in">abs</span>(y - a[p[i]].y) + h;<br>            &#125;<br>            dmx1 = dmx2 = -inf, pmx1 = pmx2 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (d[i] &gt;= dmx1 &amp;&amp; p[i] != pmx1)<br>                    dmx2 = dmx1, pmx2 = pmx1, dmx1 = d[i], pmx1 = p[i];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d[i] &gt;= dmx1 &amp;&amp; p[i] == pmx1)<br>                    dmx1 = d[i], pmx1 = p[i];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d[i] &gt;= dmx2 &amp;&amp; p[i] != pmx1)<br>                    dmx2 = d[i], pmx2 = p[i];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (pmx1 != <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">upd</span>(pmx1, n, dmx1);<br>            <span class="hljs-keyword">if</span> (pmx2 != <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">upd</span>(pmx2, n, dmx2);<br>            <span class="hljs-keyword">if</span> (x &gt;= a[p[<span class="hljs-number">1</span>]].x || p[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br>                p[<span class="hljs-number">5</span>] = p[<span class="hljs-number">1</span>], p[<span class="hljs-number">1</span>] = n;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt;= a[p[<span class="hljs-number">5</span>]].x || p[<span class="hljs-number">5</span>] == <span class="hljs-number">0</span>)<br>                p[<span class="hljs-number">5</span>] = n;<br>            <span class="hljs-keyword">if</span> (x &lt;= a[p[<span class="hljs-number">2</span>]].x || p[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>)<br>                p[<span class="hljs-number">6</span>] = p[<span class="hljs-number">2</span>], p[<span class="hljs-number">2</span>] = n;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt;= a[p[<span class="hljs-number">6</span>]].x || p[<span class="hljs-number">6</span>] == <span class="hljs-number">0</span>)<br>                p[<span class="hljs-number">6</span>] = n;<br>            <span class="hljs-keyword">if</span> (y &gt;= a[p[<span class="hljs-number">3</span>]].y || p[<span class="hljs-number">3</span>] == <span class="hljs-number">0</span>)<br>                p[<span class="hljs-number">7</span>] = p[<span class="hljs-number">3</span>], p[<span class="hljs-number">3</span>] = n;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (y &gt;= a[p[<span class="hljs-number">7</span>]].y || p[<span class="hljs-number">7</span>] == <span class="hljs-number">0</span>)<br>                p[<span class="hljs-number">7</span>] = n;<br>            <span class="hljs-keyword">if</span> (y &lt;= a[p[<span class="hljs-number">4</span>]].y || p[<span class="hljs-number">4</span>] == <span class="hljs-number">0</span>)<br>                p[<span class="hljs-number">8</span>] = p[<span class="hljs-number">4</span>], p[<span class="hljs-number">4</span>] = n;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (y &lt;= a[p[<span class="hljs-number">8</span>]].y || p[<span class="hljs-number">8</span>] == <span class="hljs-number">0</span>)<br>                p[<span class="hljs-number">8</span>] = n;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)<br>                <span class="hljs-built_in">read</span>(a);<br>            <span class="hljs-keyword">int</span> ans = T.<span class="hljs-built_in">qry</span>(rt, a);<br>            lastans = ans % <span class="hljs-number">3</span>;<br>            <span class="hljs-built_in">wtln</span>(ans);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> CornOI </tag>
            
            <tag> 计算几何 </tag>
            
            <tag> 距离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#17」お気に召すまま</title>
      <link href="/2021/08/25/Corn17-T1/"/>
      <url>/2021/08/25/Corn17-T1/</url>
      
        <content type="html"><![CDATA[<p>「异或，相当于二进制不进位的加法。」<br>因为 $x\oplus y\leq x+y$，所以把所有数异或起来即为答案。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> x, ans;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;happy&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(x);<br>        ans ^= x;<br>    &#125;<br>    <span class="hljs-built_in">wt</span>(ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CornOI </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#17」赛后总结</title>
      <link href="/2021/08/25/Corn17-%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/25/Corn17-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><del>没想到 YSJ 出题那么毒瘤</del><br><del>为什么题目名都是日文</del><br>T1 很明显是贪心，但是没想到怎么贪。<br>接下来看 T3，<del>不会</del><br>又去想 T1，发现贪心做法极其简单，$100$ 分到手。<br>然后 T2，只会 $40$ 分暴力。写完了。<br>T4 肯定是数据结构，<del>但我不会</del>，写了 $15$ 分暴力。<br>最后 T3，写了 $O(n^2)$ 暴力，有 $65$ 分。<br>预估得分：$100+40+65+15=220$<br>实际得分：$100+10+65+15=190$<br>咳 T2 没开 <code>long long</code>，挂了 $30$ 分。<br>注意细节啊！</p><hr><p>题解：</p><ul><li><a href="https://cymrain07.github.io/2021/08/25/Corn17-T1/">T1 お気に召すまま</a></li><li><a href="https://cymrain07.github.io/2021/08/25/Corn17-T2/">T2 ウミユリ海底譚</a></li><li><a href="https://cymrain07.github.io/2021/08/25/Corn17-T4/">T4 ローリンガール</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 赛后总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CornOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#16」程序设计</title>
      <link href="/2021/08/24/Corn16-T2/"/>
      <url>/2021/08/24/Corn16-T2/</url>
      
        <content type="html"><![CDATA[<p>使用 KMP 算法求出 $\textit{next}(i)$。<br>一个前缀字符串（末尾位置为 $i$）的最小循环节是 $i-\textit{next}(i)$。<br>注意至少循环两次，与 $\lfloor\dfrac i2\rfloor$ 比较即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 3000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n, a[N], nxt[N];<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c))<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c))<br>        x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">write</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getnext</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    nxt[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">-1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j != <span class="hljs-number">-1</span> &amp;&amp; a[i] != a[j + <span class="hljs-number">1</span>])<br>            j = nxt[j];<br>        nxt[i] = ++j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;PF&quot;</span>);<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">read</span>(a[i]);<br>    <span class="hljs-built_in">getnext</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (nxt[i] == <span class="hljs-number">0</span> || i - nxt[i] &gt; i / <span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">wt</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">wt</span>(i - nxt[i]);<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#15」身败名裂</title>
      <link href="/2021/08/24/Corn15-T3/"/>
      <url>/2021/08/24/Corn15-T3/</url>
      
        <content type="html"><![CDATA[<p>如果 $k=1$，这就是一道 01-Trie 的模板题。<br>现在考虑 $k\ne1$ 的情况。<br>$k=1$ 时，在树上贪心的走 $x$ 对应位取反的边。<br>$k\ne1$ 时，以 $x$ 对应位为 $1$ 举例：<br>如果 $k\geq$ 边 $0$ 所对应子树大小（数字个数），则走 $1$，否则走 $0$，并且 <code>k -= num[a[pos][!val]]</code>。<br>$0$ 同理。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c))<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c))<br>        x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">write</span>(x);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie_01</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> rt = <span class="hljs-number">1</span>, tot = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> a[N][<span class="hljs-number">2</span>], num[N];<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>, pos = rt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> val = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (a[pos][!val] &amp;&amp; num[a[pos][!val]] &amp;&amp; num[a[pos][!val]] &gt;= k)<br>                res += <span class="hljs-number">1</span> &lt;&lt; i, pos = a[pos][!val];<br>            <span class="hljs-keyword">else</span><br>                k -= num[a[pos][!val]], pos = a[pos][val];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> pos = rt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> val = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (a[pos][val])<br>                pos = a[pos][val];<br>            <span class="hljs-keyword">else</span><br>                pos = a[pos][val] = ++tot;<br>            num[pos]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> pos = rt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> val = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            pos = a[pos][val];<br>            num[pos]--;<br>        &#125;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> op, x;<br>        <span class="hljs-built_in">read</span>(op), <span class="hljs-built_in">read</span>(x);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>            T.<span class="hljs-built_in">ins</span>(x);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>            T.<span class="hljs-built_in">del</span>(x);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> k;<br>            <span class="hljs-built_in">read</span>(k);<br>            <span class="hljs-built_in">write</span>(T.<span class="hljs-built_in">find</span>(x, k)), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Trie </tag>
            
            <tag> 01-Trie </tag>
            
            <tag> CornOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#15」内卷时代</title>
      <link href="/2021/08/24/Corn15-T2/"/>
      <url>/2021/08/24/Corn15-T2/</url>
      
        <content type="html"><![CDATA[<p>先用线性筛求出每个数的最小质因数。<br>对于每个单点乘，质因数分解 $x$，更新一下 $a(i)$ 的质因数分解。<br>如果 $a(i)$ 的某个质因数个数比答案的大则更新答案。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 20000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>;<br>bitset&lt;M&gt; np;<br><span class="hljs-keyword">int</span> pri[M], cnt, pre[M];<br>unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mp[N], res;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sieve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    np[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!np[i])<br>            pri[++cnt] = i, pre[i] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; i * pri[j] &lt; n &amp;&amp; j &lt;= cnt; j++)<br>        &#123;<br>            np[i * pri[j]] = <span class="hljs-number">1</span>, pre[i * pri[j]] = pri[j];<br>            <span class="hljs-keyword">if</span> (!(i % pri[j]))<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = pre[x]; x != <span class="hljs-number">1</span>; x /= t, t = pre[x])<br>    &#123;<br>        mp[p][t]++;<br>        <span class="hljs-keyword">if</span> (mp[p][t] &gt; res[t])<br>            res[t] = mp[p][t], ans = ans * t % mod;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">sieve</span>(M);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; i++)<br>        cin &gt;&gt; x, <span class="hljs-built_in">mul</span>(i, x);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> i, x;<br>        cin &gt;&gt; i &gt;&gt; x;<br>        <span class="hljs-built_in">mul</span>(i, x);<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 数论 </tag>
            
            <tag> CornOI </tag>
            
            <tag> 筛法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#15」思维碰撞</title>
      <link href="/2021/08/24/Corn15-T1/"/>
      <url>/2021/08/24/Corn15-T1/</url>
      
        <content type="html"><![CDATA[<p>设 $f(i)$ 表示以 $i$ 为右端点所有区间的价值和。<br>考虑每一对值相同的数对答案的贡献：</p><ul><li>$i-1$ 之前相同的数对对答案贡献相同，即 $f(i-1)$ 是 $f(i)$ 的一部分。</li><li>$i$ 位置上的这个数，和 $1$ 位置有 $1$ 贡献，$2$ 位置有 $2$ 贡献，$j$ 位置有 $j$ 贡献，$\text{if }a(i)=a(j)$。</li><li>开一个桶记录每个数对答案的贡献和，即 <code>c[a[i]]+=i</code>。</li></ul><p>转移方程为：</p><script type="math/tex; mode=display">f(i)=f(i-1)+c(a(i))</script><p>最后答案为：</p><script type="math/tex; mode=display">\dfrac{\displaystyle\sum_{i=1}^nf(i)}{\displaystyle\sum_{i=1}^ni}</script><p>注意离散化。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-keyword">int</span> c[N];<br><span class="hljs-keyword">int</span> n, a[N], tot, sum[N];<br><span class="hljs-keyword">double</span> f[N], x;<br>unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">count</span>(x))<br>            a[i] = mp[x];<br>        <span class="hljs-keyword">else</span><br>            mp[x] = a[i] = ++tot;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        sum[i] = sum[i - <span class="hljs-number">1</span>] + i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        f[i] = f[i - <span class="hljs-number">1</span>] + c[a[i]];<br>        x += f[i] / sum[n];<br>        c[a[i]] += i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6lf&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 线性 DP </tag>
            
            <tag> CornOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#15」赛后总结</title>
      <link href="/2021/08/24/Corn15-%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/24/Corn15-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><del>fr 的题果然难</del><br><del>我竟然没去世</del><br>开始先看 T1，想了半天好像有一个 $O(n)$ 的递推，但是会炸高精。<br>先扔这去看 T2，思考良久<del>无果</del>，写了个暴力。<br>然后是 T3，哇这不是 01-Trie 吗，有 $54$ 分，写完了想 $k\neq 1$ 的情况，发现和 $k=1$ 几乎是一样的，写完了。<br>回去看 T1，<del>傻透气的</del>我发现自己分母算错了，炸不了高精，可以过 $100$，愉快写完。<br>T4 一看就是神仙题，溜了。<br>预估得分 $100+7+100+0=207$<br>实际得分 $100+0+100+0=200$<br>只挂了个暴力。<br>话说我 T1 解法和题解不一样欸。<br><del>这套题真难啊</del><br><del>明天的比赛竟然还没放出来</del></p><hr><p>题解：</p><ul><li><a href="https://cymrain07.github.io/2021/08/24/Corn15-T1/">T1 思维碰撞</a></li><li><a href="https://cymrain07.github.io/2021/08/24/Corn15-T2/">T2 内卷时代</a></li><li><a href="https://cymrain07.github.io/2021/08/24/Corn15-T3/">T3 身败名裂</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 赛后总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CornOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#16」数据结构</title>
      <link href="/2021/08/23/Corn16-T1/"/>
      <url>/2021/08/23/Corn16-T1/</url>
      
        <content type="html"><![CDATA[<p>首先将所有询问按人所处位置排序。<br>从左到右扫每个建筑和询问，用单调栈维护在这个位置上能看到的建筑。<br>处理能见度：在单调栈上二分查找，求出最远能望到的建筑的下标。<br>最后更新每个询问的答案。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> op, val, pos, id;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;x) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> pos == x.pos ? op &lt; x.op : pos &lt; x.pos;<br>    &#125;<br>&#125; a[N];<br><br><span class="hljs-keyword">int</span> top, stk[N], ans[N];<br><span class="hljs-keyword">int</span> l, r, res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;DS&quot;</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i].pos &gt;&gt; a[i].val, a[i].op = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        cin &gt;&gt; a[i + n].val &gt;&gt; a[i + n].pos, a[i + n].op = <span class="hljs-number">1</span>, a[i + n].id = i;<br>    <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + m + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i].op == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (top != <span class="hljs-number">0</span> &amp;&amp; a[stk[top]].val &lt;= a[i].val)<br>                top--;<br>            stk[++top] = i;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            l = <span class="hljs-number">1</span>, r = top, res = top + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt;= r)<br>            &#123;<br>                <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (a[i].pos - a[stk[mid]].pos &lt;= a[i].val)<br>                    res = mid, r = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>            ans[a[i].id] = top - res + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n + m; i &gt;= <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i].op == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (top != <span class="hljs-number">0</span> &amp;&amp; a[stk[top]].val &lt;= a[i].val)<br>                top--;<br>            stk[++top] = i;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            l = <span class="hljs-number">1</span>, r = top, res = top + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt;= r)<br>            &#123;<br>                <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (a[stk[mid]].pos - a[i].pos &lt;= a[i].val)<br>                    res = mid, r = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>            ans[a[i].id] += top - res + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        cout &lt;&lt; ans[i] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> CornOI </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#16」离散数学</title>
      <link href="/2021/08/23/Corn16-T4/"/>
      <url>/2021/08/23/Corn16-T4/</url>
      
        <content type="html"><![CDATA[<p>首先 Tarjan 把环缩了。<br>然后 <del>【模板】可重最小链覆盖</del><br>用 Floyd 传递闭包，在连通的两点间再连边。<br>把每个点拆成一左一右，对于每条边 $(x,y)$，连边 $(x_0,y_1)$。<br>用匈牙利算法跑二分图最大匹配，答案即为点数减最大匹配。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 610</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO(x) freopen(x <span class="hljs-meta-string">&quot;.in&quot;</span>, <span class="hljs-meta-string">&quot;r&quot;</span>, stdin), freopen(x <span class="hljs-meta-string">&quot;.out&quot;</span>, <span class="hljs-meta-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">int</span> n, m, col[N], dfn[N], low[N], cnt, tot, dis[N][N], mat[N];<br>bitset&lt;N&gt; vis;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N], e1[N];<br>stack&lt;<span class="hljs-keyword">int</span>&gt; st;<br>queue&lt;<span class="hljs-keyword">int</span>&gt; q, q1;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[x] = low[x] = ++cnt;<br>    st.<span class="hljs-built_in">push</span>(x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : e[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!dfn[i])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(i);<br>            low[x] = <span class="hljs-built_in">min</span>(low[x], low[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!col[i])<br>            low[x] = <span class="hljs-built_in">min</span>(low[x], dfn[i]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (low[x] == dfn[x])<br>    &#123;<br>        tot++;<br>        <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            col[st.<span class="hljs-built_in">top</span>()] = tot;<br>            <span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">top</span>() == x)<br>            &#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : e1[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            vis[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!mat[i] || <span class="hljs-built_in">dfs</span>(mat[i]))<br>            &#123;<br>                mat[i] = x;<br>                mat[x] = i;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Hungarian</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++)<br>    &#123;<br>        vis.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(i))<br>            ans++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">IO</span>(<span class="hljs-string">&quot;DM&quot;</span>);<br>    cin &gt;&gt; n;<br>    string s;<br>    <span class="hljs-built_in">getline</span>(cin, s);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">while</span> (x--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> a;<br>            cin &gt;&gt; a;<br>            e[i].<span class="hljs-built_in">push_back</span>(a);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!col[i])<br>            <span class="hljs-built_in">tarjan</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j : e[i])<br>            <span class="hljs-keyword">if</span> (col[i] != col[j])<br>                dis[col[i]][col[j]] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= tot; k++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot; j++)<br>                dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i == j)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (dis[i][j] &lt; <span class="hljs-number">1005</span>)<br>                e1[i].<span class="hljs-built_in">push_back</span>(tot + j), e1[tot + j].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    cout &lt;&lt; tot - <span class="hljs-built_in">Hungarian</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> CornOI </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 传递闭包 </tag>
            
            <tag> 二分图最大匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#16」赛后总结</title>
      <link href="/2021/08/23/Corn16-%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/23/Corn16-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>开始浏览了四道题，发现 D 是个图论，先想无果，水了 $30$ 走人。<br>回去看 B，哇这不是字符串最小循环节原题吗，加个特判循环超过两次可以过。<br>开 A，开始审错题了，白写了 $30$ 分钟，最后写了个暴力应该有 $45$ 分。<br>写 A 花掉了大量时间，C 直接输出 $\texttt?$ 有 $5/10$ 分。<br>D 又加了个固定输出骗分。<br>预估得分 $45+100+5/10+30=180/185$。<br>实际得分 $70+100+10+35=215$。<br>多拿了不少分。<br>A 的数据好水，$O(nm)$ 有 $70$ 分。<br>总体不错，<del>明天面对 fr 的题直接去世</del></p><hr><p>题解：</p><ul><li><a href="https://cymrain07.github.io/2021/08/23/Corn16-T1/">T1 数据结构</a></li><li><a href="https://cymrain07.github.io/2021/08/24/Corn16-T2/">T2 程序设计</a></li><li><a href="https://cymrain07.github.io/2021/08/23/Corn16-T4/">T4 离散数学</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 赛后总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CornOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「197-G」树的直径</title>
      <link href="/2021/08/19/197-G/"/>
      <url>/2021/08/19/197-G/</url>
      
        <content type="html"><![CDATA[<p>树形 DP 求出每个点延伸的最长距离 $d_1$ 和次长距离 $d_2$。（路径不重合）<br>最后答案为：</p><script type="math/tex; mode=display">\max_{i=1}^n(d_1(i)+d_2(i))</script><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, ans, d1[N], d2[N];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>&#125;;<br><br>vector&lt;edge&gt; e[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (edge i : e[u])<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = i.v;<br>        <span class="hljs-keyword">if</span> (v == fa)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>        <span class="hljs-keyword">int</span> t = d1[v] + i.w;<br>        <span class="hljs-keyword">if</span> (t &gt; d1[u])<br>            d2[u] = d1[u], d1[u] = t;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t &gt; d2[u])<br>            d2[u] = t;<br>    &#125;<br>    ans = <span class="hljs-built_in">max</span>(ans, d1[u] + d2[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>        e[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树形 DP </tag>
            
            <tag> 树的直径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Corn#2」奆炮的重生</title>
      <link href="/2021/08/19/Corn2-T1/"/>
      <url>/2021/08/19/Corn2-T1/</url>
      
        <content type="html"><![CDATA[<p>设 $f(i,j)$ 表示合并 $[i,j]$ 内的 奆炮获得的最大 $\text{fAKe}$ 值，$g(i,j)$ 为最小 $\text{fAKe}$ 值。<br>由于三炮合一时 $A\times B$ 负负得正，所以要同时用最大值和最小值更新。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 80</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> t, n, a[N], f[N][N], g[N][N], ans;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;pao.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;pao.out&quot;, &quot;w&quot;, stdout);</span><br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        ans = <span class="hljs-number">-0x3f3f3f3f</span>;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a));<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">-0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>        <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(g));<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            cin &gt;&gt; a[i];<br>            f[i][i] = g[i][i] = f[i + n][i + n] = g[i + n][i + n] = a[i + n] = a[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n - len + <span class="hljs-number">1</span>; i++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> j = i + len - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt; j; k++)<br>                &#123;<br>                    f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i][k] + f[k + <span class="hljs-number">1</span>][j]);<br>                    g[i][j] = <span class="hljs-built_in">min</span>(g[i][j], g[i][k] + g[k + <span class="hljs-number">1</span>][j]);<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt; j - <span class="hljs-number">1</span>; k++)<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = k + <span class="hljs-number">1</span>; l &lt; j; l++)<br>                    &#123;<br>                        f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i][k] * f[l + <span class="hljs-number">1</span>][j] - g[k + <span class="hljs-number">1</span>][l]);<br>                        f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], g[i][k] * g[l + <span class="hljs-number">1</span>][j] - g[k + <span class="hljs-number">1</span>][l]);<br>                        g[i][j] = <span class="hljs-built_in">min</span>(g[i][j], f[i][k] * f[l + <span class="hljs-number">1</span>][j] - f[k + <span class="hljs-number">1</span>][l]);<br>                        g[i][j] = <span class="hljs-built_in">min</span>(g[i][j], g[i][k] * g[l + <span class="hljs-number">1</span>][j] - f[k + <span class="hljs-number">1</span>][l]);<br>                        g[i][j] = <span class="hljs-built_in">min</span>(g[i][j], f[i][k] * g[l + <span class="hljs-number">1</span>][j] - f[k + <span class="hljs-number">1</span>][l]);<br>                        g[i][j] = <span class="hljs-built_in">min</span>(g[i][j], g[i][k] * f[l + <span class="hljs-number">1</span>][j] - f[k + <span class="hljs-number">1</span>][l]);<br>                    &#125;<br>            &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            ans = <span class="hljs-built_in">max</span>(ans, f[i][i + n - <span class="hljs-number">1</span>]);<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> CornOI </tag>
            
            <tag> 区间 DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「SG#1」收费站</title>
      <link href="/2021/08/19/SG1-T3/"/>
      <url>/2021/08/19/SG1-T3/</url>
      
        <content type="html"><![CDATA[<p>首先二分最大点权。<br><del>其实应该二分最大点权的点排名，但我懒了</del><br>Dijkstra 跑最短路，跳过点权大于答案的点。<br><del>关于 SPFA，它死了</del><br>如果 $dis(t)\leq$ 油箱容量则合法，否则不合法。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, dis;<br>&#125;;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">int</span> n, m, s, t, V, f[N], l, r, ans = <span class="hljs-number">-1</span>, dis[N];<br>vector&lt;edge&gt; e[<span class="hljs-number">100005</span>];<br>priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;dis[s], s&#125;);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        pii i = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">int</span> u = i.second;<br>        <span class="hljs-keyword">if</span> (dis[u] != i.first)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span> (edge j : e[u])<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = j.v;<br>            <span class="hljs-keyword">if</span> (f[v] &gt; x)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + j.dis)<br>                dis[v] = dis[u] + j.dis, q.<span class="hljs-built_in">push</span>(&#123;dis[v], v&#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[t] &gt; V ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">binary</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    l = <span class="hljs-built_in">max</span>(f[s], f[t]), r = <span class="hljs-number">1000000000</span> * n;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>            ans = mid, r = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            l = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (dis[t] == <span class="hljs-number">0x3f3f3f3f</span>)<br>            <span class="hljs-keyword">return</span> ans = <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t &gt;&gt; V;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; f[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, a, b, c; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        e[a].<span class="hljs-built_in">push_back</span>(&#123;b, c&#125;), e[b].<span class="hljs-built_in">push_back</span>(&#123;a, c&#125;);<br>    &#125;<br>    <span class="hljs-built_in">binary</span>();<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> CornOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「189-I」食物链</title>
      <link href="/2021/08/18/189-I/"/>
      <url>/2021/08/18/189-I/</url>
      
        <content type="html"><![CDATA[<p>首先生物中食物网肯定是个 DAG。<br>统计每个点的出度 $out(i)$。<br>进行拓扑排序，在 BFS 的同时进行 DP 转移：<br>当存在一条从 $u$到 $v$ 的边，$f(v)\gets f(v)+f(u)$。<br>最后答案是：</p><script type="math/tex; mode=display">\sum_{out(i)=0}f(i)</script><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, m, in[N], out[N], ans, dp[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br>queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">topo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>        &#123;<br>            dp[v] += dp[u];<br>            in[v]--;<br>            <span class="hljs-keyword">if</span> (in[v] == <span class="hljs-number">0</span>)<br>                q.<span class="hljs-built_in">push</span>(v);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v;<br>        e[u].<span class="hljs-built_in">push_back</span>(v);<br>        in[v]++, out[u]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (in[i] == <span class="hljs-number">0</span>)<br>            q.<span class="hljs-built_in">push</span>(i);<br>        <span class="hljs-keyword">if</span> (in[i] == <span class="hljs-number">0</span> &amp;&amp; out[i] != <span class="hljs-number">0</span>)<br>            dp[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">topo</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (out[i] == <span class="hljs-number">0</span>)<br>            ans += dp[i];<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> DAG 上的 DP </tag>
            
            <tag> 图论 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「187-Y」银河英雄传说</title>
      <link href="/2021/08/18/187-Y/"/>
      <url>/2021/08/18/187-Y/</url>
      
        <content type="html"><![CDATA[<p>带权并查集维护每个点到祖先的距离 $d_i$。<br>查询时返回 $|d_i-d_j|-1$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> n 30000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-keyword">int</span> t, d[n + <span class="hljs-number">1</span>], fa[n + <span class="hljs-number">1</span>], siz[n + <span class="hljs-number">1</span>];<br><span class="hljs-function">pii <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == fa[x])<br>        <span class="hljs-keyword">return</span> &#123;x, d[x]&#125;;<br>    pii res = <span class="hljs-built_in">find</span>(fa[x]);<br>    fa[x] = res.first, d[x] += res.second;<br>    res.second = d[x];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mrg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    pii fx = <span class="hljs-built_in">find</span>(x), fy = <span class="hljs-built_in">find</span>(y);<br>    d[fx.first] = siz[fy.first];<br>    fa[fx.first] = fy.first;<br>    siz[fy.first] += siz[fx.first];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        fa[i] = i, siz[i] = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-keyword">char</span> c;<br>        <span class="hljs-keyword">int</span> x, y;<br>        cin &gt;&gt; c &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;M&#x27;</span>)<br>            <span class="hljs-built_in">mrg</span>(x, y);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(x).first != <span class="hljs-built_in">find</span>(y).first)<br>                cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">abs</span>(d[x] - d[y]) - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 带权并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「201-F」The XOR-longest Path</title>
      <link href="/2021/08/17/201-F/"/>
      <url>/2021/08/17/201-F/</url>
      
        <content type="html"><![CDATA[<p>首先预处理出每个点到根节点的异或和 $s(i)$。<br>两个点 $u,v$ 之间的异或和是：</p><script type="math/tex; mode=display">s(u)\oplus s(\operatorname{LCA}(u,v))\oplus s(v)\oplus s(\operatorname{LCA}(u,v))\\=s(u)\oplus s(v)</script><p>所以把所有 $s(i)$ 插入到 01-Trie 里求出最大异或数对即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie_01</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> rt = <span class="hljs-number">1</span>, tot = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">10000005</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>, pos = rt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> val = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (a[pos][!val])<br>                ans += <span class="hljs-number">1</span> &lt;&lt; i, pos = a[pos][!val];<br>            <span class="hljs-keyword">else</span><br>                pos = a[pos][val];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> pos = rt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> val = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (a[pos][val])<br>                pos = a[pos][val];<br>            <span class="hljs-keyword">else</span><br>                pos = a[pos][val] = ++tot;<br>        &#125;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-keyword">int</span> n, s[N], ans;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>&#125;;<br>vector&lt;edge&gt; e[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (edge x : e[u])<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = x.v;<br>        <span class="hljs-keyword">if</span> (v == fa)<br>            <span class="hljs-keyword">continue</span>;<br>        s[v] = s[u] ^ x.w;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;), e[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, T.<span class="hljs-built_in">find</span>(s[i]));<br>        T.<span class="hljs-built_in">ins</span>(s[i]);<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Trie </tag>
            
            <tag> 01-Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「201-J」Power Strings</title>
      <link href="/2021/08/17/201-J/"/>
      <url>/2021/08/17/201-J/</url>
      
        <content type="html"><![CDATA[<p>首先预处理出每个前缀子串子串的哈希值，就可以 $O(1)$ 求出每个子串的哈希值。<br>一个前缀子串（长为 $l$）为这个字符串的最小循环节的充要条件是 $s[1\cdots n-l]=s[l+1\cdots n]$。<br>枚举这个字符串长度的所有约数，使用哈希判断即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> base 41</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 2007042347</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string s;<br><span class="hljs-keyword">int</span> n, power[N], hs[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    power[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>        power[i] = power[i - <span class="hljs-number">1</span>] * base % mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        hs[i] = (hs[i - <span class="hljs-number">1</span>] * base + s[i]) % mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Hash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> ((hs[r] - hs[l - <span class="hljs-number">1</span>] * power[r - l + <span class="hljs-number">1</span>]) % mod + mod) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">pre</span>();<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; s)<br>    &#123;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;.&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        n = s.<span class="hljs-built_in">lgth</span>();<br>        <span class="hljs-built_in">work</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / <span class="hljs-number">2</span>; i++)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Hash</span>(<span class="hljs-number">0</span>, n - i - <span class="hljs-number">1</span>) == <span class="hljs-built_in">Hash</span>(i, n - <span class="hljs-number">1</span>) &amp;&amp; n % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                cout &lt;&lt; n / i &lt;&lt; endl;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>)<br>            cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 字符串哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「208-I」大魔法师</title>
      <link href="/2021/08/16/208-I/"/>
      <url>/2021/08/16/208-I/</url>
      
        <content type="html"><![CDATA[<p>卡了一个小时常数后……<br><del>「由于评测机性能过低，本题时限已调整至原题 2 倍，即 10s。」</del><br>用线段树维护数列。<br>设线段树上每个区间是一个向量 $\begin{pmatrix}<br> \sum A &amp;\sum B  &amp;\sum C  &amp; len<br>\end{pmatrix}$，每个操作都可以看做乘一个矩阵。<br>操作 $1$：</p><script type="math/tex; mode=display">\begin{pmatrix}  1&  0&  0&0 \\  1&  1&  0&0\\  0&  0&  1&0\\  0&  0&  0&1\end{pmatrix}</script><p>操作 $2$：</p><script type="math/tex; mode=display">\begin{pmatrix}  1&  0&  0&0 \\  0&  1&  0&0\\  0&  1&  1&0\\  0&  0&  0&1\end{pmatrix}</script><p>操作 $3$：</p><script type="math/tex; mode=display">\begin{pmatrix}  1&  0&  1&0 \\  0&  1&  0&0\\  0&  0&  1&0\\  0&  0&  0&1\end{pmatrix}</script><p>操作 $4$：</p><script type="math/tex; mode=display">\begin{pmatrix}  1&  0&  0&0 \\  0&  1&  0&0\\  0&  0&  1&0\\  v&  0&  0&1\end{pmatrix}</script><p>操作 $5$：</p><script type="math/tex; mode=display">\begin{pmatrix}  1&  0&  0&0 \\  0&  v&  0&0\\  0&  0&  1&0\\  0&  0&  0&1\end{pmatrix}</script><p>操作 $6$：</p><script type="math/tex; mode=display">\begin{pmatrix}  1&  0&  0&0 \\  0&  1&  0&0\\  0&  0&  0&0\\  0&  0&  v&1\end{pmatrix}</script><p>打一个懒标记，初始化为单位矩阵，操作一次就把矩阵乘到懒标记上。<br>查询同普通线段树。<br>乘法会爆 <code>int</code>，乘的时候要乘 <code>1ll</code>。<br>注意本题极其卡常，洛谷要吸氧。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 250005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n, a[N], b[N], c[N], m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">mat</span>(<span class="hljs-keyword">bool</span> val = <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a));<br>        <span class="hljs-keyword">if</span> (val == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>                a[i][i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat x) <span class="hljs-keyword">const</span><br>    &#123;<br>        mat res = (<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>                    res.a[i][j] += <span class="hljs-number">1ll</span> * a[i][k] * x.a[k][j] % mod, res.a[i][j] %= mod;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vec</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v[<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">vec</span>() &#123; <span class="hljs-built_in">memset</span>(v, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(v)); &#125;<br>    <span class="hljs-built_in">vec</span>(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c) &#123; v[<span class="hljs-number">0</span>] = a, v[<span class="hljs-number">1</span>] = b, v[<span class="hljs-number">2</span>] = c, v[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>; &#125;<br>    vec <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> vec x) <span class="hljs-keyword">const</span><br>    &#123;<br>        vec res;<br>        res.v[<span class="hljs-number">0</span>] = (v[<span class="hljs-number">0</span>] + x.v[<span class="hljs-number">0</span>]) % mod;<br>        res.v[<span class="hljs-number">1</span>] = (v[<span class="hljs-number">1</span>] + x.v[<span class="hljs-number">1</span>]) % mod;<br>        res.v[<span class="hljs-number">2</span>] = (v[<span class="hljs-number">2</span>] + x.v[<span class="hljs-number">2</span>]) % mod;<br>        res.v[<span class="hljs-number">3</span>] = v[<span class="hljs-number">3</span>] + x.v[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    vec <span class="hljs-keyword">operator</span>*(mat y)<br>    &#123;<br>        vec res;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>                res.v[j] += (<span class="hljs-number">1ll</span> * v[k] * y.a[k][j]) % mod, res.v[j] %= mod;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br>mat t1, t2, t3, t4, t5, t6;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    t1.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = t2.a[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = t3.a[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    t6.a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegmentTree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> root 1, 1, n</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br>    vec tr[N &lt;&lt; <span class="hljs-number">2</span>];<br>    mat tag[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span> </span>&#123; tr[pos] = tr[lpos] + tr[rpos]; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bld</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span> tr[pos] = <span class="hljs-built_in">vec</span>(a[l], b[l], c[l]), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">bld</span>(lson), <span class="hljs-built_in">bld</span>(rson), <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ntg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, mat t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        tag[pos] = tag[pos] * t;<br>        tr[pos] = tr[pos] * t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">ntg</span>(lpos, tag[pos]), <span class="hljs-built_in">ntg</span>(rpos, tag[pos]), tag[pos] = <span class="hljs-built_in">mat</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, mat t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">ntg</span>(pos, t), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">psd</span>(pos);<br>        <span class="hljs-keyword">if</span> (L &lt;= mid)<br>            <span class="hljs-built_in">upd</span>(lson, L, R, t);<br>        <span class="hljs-keyword">if</span> (R &gt; mid)<br>            <span class="hljs-built_in">upd</span>(rson, L, R, t);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function">vec <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> tr[pos];<br>        <span class="hljs-built_in">psd</span>(pos);<br>        <span class="hljs-keyword">if</span> (R &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R);<br>        <span class="hljs-keyword">if</span> (L &gt; mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(rson, L, R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R) + <span class="hljs-built_in">qry</span>(rson, L, R);<br>    &#125;<br>&#125; T;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">pre</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a[i], &amp;b[i], &amp;c[i]);<br>    T.<span class="hljs-built_in">bld</span>(root);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> l, r, v, op;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>            T.<span class="hljs-built_in">upd</span>(root, l, r, t1);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>            T.<span class="hljs-built_in">upd</span>(root, l, r, t2);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)<br>            T.<span class="hljs-built_in">upd</span>(root, l, r, t3);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">7</span>)<br>        &#123;<br>            vec ans = T.<span class="hljs-built_in">qry</span>(root, l, r);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, ans.v[<span class="hljs-number">0</span>], ans.v[<span class="hljs-number">1</span>], ans.v[<span class="hljs-number">2</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v);<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-number">4</span>)<br>                t4.a[<span class="hljs-number">3</span>][<span class="hljs-number">0</span>] = v, T.<span class="hljs-built_in">upd</span>(root, l, r, t4);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">5</span>)<br>                t5.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = v, T.<span class="hljs-built_in">upd</span>(root, l, r, t5);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">6</span>)<br>                t6.a[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = v, T.<span class="hljs-built_in">upd</span>(root, l, r, t6);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「188-T」Hotel G</title>
      <link href="/2021/08/16/188-T/"/>
      <url>/2021/08/16/188-T/</url>
      
        <content type="html"><![CDATA[<p>修改操作是裸的线段树。<br>维护每一个区间的最长全 $0$ 长度/后缀、前缀长度。<br>查询时，在线段树上二分：</p><ul><li>如果左区间最长 $0$ 长度 $\geq d$，在左区间查找。</li><li>如果左区间后缀 $+$ 右区间前缀 $\geq d$，直接返回答案。</li><li>如果右区间最长 $0$ 长度 $\geq d$，在右区间查找。</li><li>否则无解。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 50005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegmentTree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> now pos, l, r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> root 1, 1, n</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br>    <span class="hljs-keyword">int</span> tag[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> l, mx, pre, suf;<br>        <span class="hljs-built_in">node</span>() &#123; l = mx = pre = suf = <span class="hljs-number">1</span>; &#125;<br>        node <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> node x) <span class="hljs-keyword">const</span><br>        &#123;<br>            node res;<br>            res.mx = <span class="hljs-built_in">max</span>(mx, <span class="hljs-built_in">max</span>(x.mx, suf + x.pre));<br>            res.pre = pre + (pre == l ? x.pre : <span class="hljs-number">0</span>);<br>            res.suf = x.suf + (x.suf == x.l ? suf : <span class="hljs-number">0</span>);<br>            res.l = l + x.l;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125; tr[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">SegmentTree</span>() &#123; <span class="hljs-built_in">memset</span>(tag, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(tag)); &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span> </span>&#123; tr[pos] = tr[lpos] + tr[rpos]; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ntg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">bool</span> op)</span></span><br><span class="hljs-function">    </span>&#123;<br>        tag[pos] = op;<br>        tr[pos].mx = (op == <span class="hljs-number">0</span> ? tr[pos].l : <span class="hljs-number">0</span>);<br>        tr[pos].suf = tr[pos].pre = tr[pos].mx;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (tag[pos] != <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">ntg</span>(lpos, tag[pos]), <span class="hljs-built_in">ntg</span>(rpos, tag[pos]), tag[pos] = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bld</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">bld</span>(lson), <span class="hljs-built_in">bld</span>(rson), <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">bool</span> op)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">ntg</span>(pos, op), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">if</span> (L &lt;= mid)<br>            <span class="hljs-built_in">upd</span>(lson, L, R, op);<br>        <span class="hljs-keyword">if</span> (R &gt; mid)<br>            <span class="hljs-built_in">upd</span>(rson, L, R, op);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> d)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">if</span> (tr[lpos].mx &gt;= d)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, d);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tr[lpos].suf + tr[rpos].pre &gt;= d)<br>            <span class="hljs-keyword">return</span> mid - tr[lpos].suf + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tr[rpos].mx &gt;= d)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(rson, d);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    T.<span class="hljs-built_in">bld</span>(root);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> op;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> d;<br>            cin &gt;&gt; d;<br>            <span class="hljs-keyword">int</span> ans = T.<span class="hljs-built_in">qry</span>(root, d);<br>            cout &lt;&lt; ans &lt;&lt; endl;<br>            <span class="hljs-keyword">if</span> (ans != <span class="hljs-number">0</span>)<br>                T.<span class="hljs-built_in">upd</span>(root, ans, ans + d - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x, d;<br>            cin &gt;&gt; x &gt;&gt; d;<br>            T.<span class="hljs-built_in">upd</span>(root, x, x + d - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 线段树上二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「191-I」松鼠的新家</title>
      <link href="/2021/08/15/191-I/"/>
      <url>/2021/08/15/191-I/</url>
      
        <content type="html"><![CDATA[<p><del>其实这题也可以用树剖+数据结构做</del><br>树上差分，记 $s_i$ 表示根节点到 $i$ 的路径加了多少个 $1$。<br>每次修改时，设 $w=\operatorname{LCA}(u,v)$：<br><code>s[u]++</code>，<code>s[v]++</code>，<code>s[w]--</code>，<code>s[fa[w]]--</code>。<br>最后对于每个节点 $i$ 答案是 $\sum\limits s_j，j\in i 的子树$。<br>注意前后两次修改共用的节点加了 $2$ 次，要减掉一次，$a_n$ 也要减 $1$。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, a[N], ans[N], s[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-keyword">int</span> fa[N], son[N], dep[N], top[N], siz[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    siz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[v])<br>            <span class="hljs-keyword">continue</span>;<br>        dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>        fa[v] = u;<br>        <span class="hljs-built_in">dfs1</span>(v);<br>        siz[u] += siz[v];<br>        <span class="hljs-keyword">if</span> (siz[v] &gt; siz[son[u]])<br>            son[u] = v;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> topf)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[u] = topf;<br>    <span class="hljs-keyword">if</span> (!son[u])<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs2</span>(son[u], topf);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa[u] &amp;&amp; v != son[u])<br>            <span class="hljs-built_in">dfs2</span>(v, v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (top[x] != top[y])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]])<br>            <span class="hljs-built_in">swap</span>(x, y);<br>        x = fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">return</span> dep[x] &lt; dep[y] ? x : y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    ans[u] = s[u];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v == fa[u])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs3</span>(v);<br>        ans[u] += ans[v];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        e[u].<span class="hljs-built_in">push_back</span>(v), e[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> w = <span class="hljs-built_in">lca</span>(a[i - <span class="hljs-number">1</span>], a[i]);<br>        s[a[i - <span class="hljs-number">1</span>]]++, s[a[i]]++, s[w]--, s[fa[w]]--;<br>    &#125;<br>    <span class="hljs-built_in">dfs3</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        ans[a[i]]--;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> LCA </tag>
            
            <tag> 差分 </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「191-C」糖果</title>
      <link href="/2021/08/15/191-C/"/>
      <url>/2021/08/15/191-C/</url>
      
        <content type="html"><![CDATA[<p>差分约束的板子题。<br>如果 $dis_i=dis_j$ 连边 $(i,j,0),(j,i,0)$。<br>如果 $dis_i&lt;dis_j$ 连边 $(i,j,1)$。<br>如果 $dis_i\leq dis_j$ 连边 $(i,j,0)$。<br>SFPA 跑最长路，如果有正环则无解。<br>最后答案是 $\sum\limits_{i=1}^n (dis_i+1)$（要加 $1$ 是因为解出的最小解会有 $0$，而题目中要求最小是 $1$）。<br>注意输入时对于 $2,4$ 操作特判 $i=j$ 的情况。<br>答案会爆 <code>int</code>，要开 <code>long long</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>&#125;;<br><span class="hljs-keyword">int</span> n, m, dis[N], cnt[N], ans;<br><span class="hljs-keyword">bool</span> vis[N];<br>vector&lt;edge&gt; e[N];<br>queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SPFA</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">-0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    dis[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>    cnt[<span class="hljs-number">0</span>]++;<br>    vis[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        vis[u] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (edge x : e[u])<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = x.v;<br>            <span class="hljs-keyword">if</span> (dis[v] &lt; dis[u] + x.w)<br>            &#123;<br>                dis[v] = dis[u] + x.w;<br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                &#123;<br>                    cnt[v]++;<br>                    <span class="hljs-keyword">if</span> (cnt[v] == n + <span class="hljs-number">2</span>)<br>                        cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span>, <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                    q.<span class="hljs-built_in">push</span>(v), vis[v] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y, op; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>            e[x].<span class="hljs-built_in">push_back</span>(&#123;y, <span class="hljs-number">0</span>&#125;), e[y].<span class="hljs-built_in">push_back</span>(&#123;x, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (x == y)<br>                cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span>, <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            e[x].<span class="hljs-built_in">push_back</span>(&#123;y, <span class="hljs-number">1</span>&#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)<br>            e[y].<span class="hljs-built_in">push_back</span>(&#123;x, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (x == y)<br>                cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span>, <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            e[y].<span class="hljs-built_in">push_back</span>(&#123;x, <span class="hljs-number">1</span>&#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">5</span>)<br>            e[x].<span class="hljs-built_in">push_back</span>(&#123;y, <span class="hljs-number">0</span>&#125;);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        e[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(&#123;i, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-built_in">SPFA</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ans += dis[i];<br>    cout &lt;&lt; ans + n;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「195-D」花匠</title>
      <link href="/2021/08/15/195-D/"/>
      <url>/2021/08/15/195-D/</url>
      
        <content type="html"><![CDATA[<p>设 $f(i,0/1)$ 表示前 $i$ 个数中最长的波浪形序列，第二维是 $0$ 表示最后一个数比倒数第二个数小，$1$ 表示最后一个数比倒数第二个数大。<br>初始化 $f(i,0)=1,f(i,1)=1$。<br>有转移方程：</p><script type="math/tex; mode=display">f(i,0)=\begin{cases}f(i-1,1)+1&\text{if }h_i<h_{i-1}\\f(i-1,0)&\text{if }h_i\geq h_{i-1}\end{cases}</script><script type="math/tex; mode=display">f(i,1)=\begin{cases}f(i-1,0)+1&\text{if }h_i>h_{i-1}\\f(i-1,1)&\text{if }h_i\leq h_{i-1}\end{cases}</script><p>答案为 $\max\{f(n,0),f(n,1)\}$。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> f[N][<span class="hljs-number">2</span>], n, h[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; h[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        f[i][<span class="hljs-number">0</span>] = h[i] &lt; h[i - <span class="hljs-number">1</span>] ? f[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + <span class="hljs-number">1</span> : f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>        f[i][<span class="hljs-number">1</span>] = h[i] &gt; h[i - <span class="hljs-number">1</span>] ? f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span> : f[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">max</span>(f[n][<span class="hljs-number">0</span>], f[n][<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 线性 DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「189-E」Tree之最小方差树</title>
      <link href="/2021/08/14/189-E/"/>
      <url>/2021/08/14/189-E/</url>
      
        <content type="html"><![CDATA[<p>首先发现 $C_i$​ 的值特别小，于是可以枚举平均数 $ave$​。<br>将每条边的边权改为 $(C_i-ave)^2$​，跑最小生成树更新答案。<br>注意不能真正枚举 $ave$​，要枚举总和再 $\dfrac{sum}{n-1}$​ 求出 $ave$​。<br>时间复杂度 $O(\sum\limits_{i=1}^nC_i m\log m)$​。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 2005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, m, fa[N], cnt, fr, sjb = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">double</span> ans = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v, c;<br>    <span class="hljs-keyword">double</span> w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> edge x) <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">return</span> w &lt; x.w; &#125;<br>&#125;;<br>edge e[M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x == fa[x] ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]); &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mrg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; fa[<span class="hljs-built_in">find</span>(x)] = <span class="hljs-built_in">find</span>(y); &#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y); &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">(<span class="hljs-keyword">double</span> ave)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        fa[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        e[i].w = (e[i].c - ave) * (e[i].c - ave);<br>    <span class="hljs-built_in">sort</span>(e + <span class="hljs-number">1</span>, e + m + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">qry</span>(e[i].u, e[i].v))<br>        &#123;<br>            <span class="hljs-built_in">mrg</span>(e[i].u, e[i].v);<br>            tmp += e[i].w;<br>            cnt++;<br>            <span class="hljs-keyword">if</span> (cnt == n - <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">sqrt</span>(tmp / (n - <span class="hljs-number">1</span>)));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, c; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; c;<br>        fr = <span class="hljs-built_in">max</span>(fr, c), sjb = <span class="hljs-built_in">min</span>(sjb, c);<br>        e[i] = &#123;u, v, c, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10000</span>; i++)<br>        <span class="hljs-built_in">kruskal</span>(<span class="hljs-built_in"><span class="hljs-keyword">double</span></span>(i) / (n - <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4f&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「197-K」骑士</title>
      <link href="/2021/08/13/197-K/"/>
      <url>/2021/08/13/197-K/</url>
      
        <content type="html"><![CDATA[<p>一句话题意：给一个基环树森林，求最大权独立集。<br>首先计算每棵基环树的答案，加在一起就是最后的答案。<br>先找出基环树中的环，随便断一条边 $(x,y)$。<br>设 $x$ 为根，讨论两种情况：</p><ol><li>选 $x$，此时不能选 $y$，即 $f(y,1)=-\infty$。</li><li>不选 $x$，此时可以选 $y$ 也可以不选 $y$。</li></ol><p>按照树的最大独立集 DP 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, val[N], ans, x, y, f[N][<span class="hljs-number">2</span>], p[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    vis[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v == fa)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (!vis[v])<br>            <span class="hljs-built_in">dfs</span>(v, u);<br>        <span class="hljs-keyword">else</span><br>            x = u, y = v;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    f[u][<span class="hljs-number">1</span>] = val[u], f[u][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((u == x &amp;&amp; v == y) || (u == y &amp;&amp; v == x))<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-built_in">dp</span>(v, u, flag);<br>            f[u][<span class="hljs-number">0</span>] += <span class="hljs-built_in">max</span>(f[v][<span class="hljs-number">1</span>], f[v][<span class="hljs-number">0</span>]);<br>            f[u][<span class="hljs-number">1</span>] += f[v][<span class="hljs-number">0</span>];<br>        &#125;<br>    <span class="hljs-keyword">if</span> (u == y &amp;&amp; flag == <span class="hljs-number">0</span>)<br>        f[y][<span class="hljs-number">1</span>] = -inf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; val[i] &gt;&gt; p[i];<br>        <span class="hljs-keyword">if</span> (p[p[i]] != i)<br>            e[i].<span class="hljs-built_in">push_back</span>(p[i]), e[p[i]].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            x = y = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (x == y)<br>            &#123;<br>                <span class="hljs-built_in">dp</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>                ans += <span class="hljs-built_in">max</span>(f[i][<span class="hljs-number">1</span>], f[i][<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> tmp = -inf;<br>            <span class="hljs-built_in">dp</span>(x, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), tmp = <span class="hljs-built_in">max</span>(tmp, f[x][<span class="hljs-number">1</span>]);<br>            <span class="hljs-built_in">dp</span>(x, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>), tmp = <span class="hljs-built_in">max</span>(tmp, f[x][<span class="hljs-number">0</span>]);<br>            ans += tmp;<br>        &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 树形 DP </tag>
            
            <tag> 基环树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板集合</title>
      <link href="/2021/08/13/%E6%9D%BF%E5%AD%90/"/>
      <url>/2021/08/13/%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">getchar</span>(), d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>        d = c, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        x = -x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wt</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x / <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">wt</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtsp</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wtln</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-built_in">wt</span>(x), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>300</p><h4 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v, dis;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> edge &amp;a)<br>    &#123;<br>        <span class="hljs-keyword">return</span> dis &lt; a.dis;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">int</span> n, m, cnt, ans;<br>vector&lt;edge&gt; e;<br><br><span class="hljs-keyword">int</span> fa[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x == fa[x] ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]); &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; fa[<span class="hljs-built_in">find</span>(x)] = <span class="hljs-built_in">find</span>(y); &#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y); &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(e.<span class="hljs-built_in">begin</span>(), e.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : e)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">query</span>(i.u, i.v))<br>        &#123;<br>            <span class="hljs-built_in">merge</span>(i.u, i.v);<br>            cnt++;<br>            ans += i.dis;<br>            <span class="hljs-keyword">if</span> (cnt == n - <span class="hljs-number">1</span>)<br>            &#123;<br>                cout &lt;&lt; ans;<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> cout &lt;&lt; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        fa[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        e.<span class="hljs-built_in">push_back</span>(&#123;u, v, w&#125;);<br>    &#125;<br>    <span class="hljs-built_in">kruskal</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h4><p>暂缺</p><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><p>302</p><h4 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);<br></code></pre></div></td></tr></table></figure><h4 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000005</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, dis;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> num, dis;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;a) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> dis &gt; a.dis;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">int</span> n, m, s, t, dis[N];<br>vector&lt;edge&gt; e[N];<br>priority_queue&lt;node&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    dis[x] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;x, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.<span class="hljs-built_in">top</span>().num;<br>        <span class="hljs-keyword">if</span> (q.<span class="hljs-built_in">top</span>().dis != dis[u])<br>        &#123;<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : e[u])<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = i.v;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + i.dis)<br>            &#123;<br>                dis[v] = dis[u] + i.dis;<br>                q.<span class="hljs-built_in">push</span>(&#123;v, dis[v]&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>        e[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>    &#125;<br>    <span class="hljs-built_in">dijkstra</span>(s);<br>    cout &lt;&lt; dis[t];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, dis;<br>&#125;;<br><br><span class="hljs-keyword">int</span> n, m, s, t, dis[N];<br>vector&lt;edge&gt; e[N];<br>queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-keyword">bool</span> in[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    dis[x] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(x);<br>    in[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        in[u] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : e[u])<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = i.v;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + i.dis)<br>            &#123;<br>                dis[v] = dis[u] + i.dis;<br>                <span class="hljs-keyword">if</span> (!in[v])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(v);<br>                    in[v] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>        e[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>    &#125;<br>    <span class="hljs-built_in">spfa</span>(s);<br>    cout &lt;&lt; dis[t];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="二分图匹配"><a href="#二分图匹配" class="headerlink" title="二分图匹配"></a>二分图匹配</h3><p>2367</p><h4 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 205</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> t, n;<br><span class="hljs-keyword">int</span> mat[N];<br><span class="hljs-keyword">bool</span> vis[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : e[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            vis[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!mat[i] || <span class="hljs-built_in">dfs</span>(mat[i]))<br>            &#123;<br>                mat[i] = x;<br>                mat[x] = i;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Hungarian</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(i))<br>            ans++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50005</span>; i++)<br>            e[i].<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-built_in">memset</span>(mat, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(mat));<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            &#123;<br>                <span class="hljs-keyword">bool</span> x;<br>                cin &gt;&gt; x;<br>                <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>)<br>                &#123;<br>                    e[i].<span class="hljs-built_in">push_back</span>(j + n);<br>                    e[j + n].<span class="hljs-built_in">push_back</span>(i);<br>                &#125;<br>            &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Hungarian</span>() == n)<br>            cout &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h3><p>30130</p><h4 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> L 20</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, q, dep[N], fa[N][L];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = dep[f] + <span class="hljs-number">1</span>;<br>    fa[u][<span class="hljs-number">0</span>] = f;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L - <span class="hljs-number">1</span>; i++)<br>        fa[u][i + <span class="hljs-number">1</span>] = fa[fa[u][i]][i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != f)<br>            <span class="hljs-built_in">dfs</span>(v, u);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y])<br>        <span class="hljs-built_in">swap</span>(x, y);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = L - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (dep[fa[x][i]] &gt;= dep[y])<br>            x = fa[x][i];<br>    <span class="hljs-keyword">if</span> (x == y)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = L - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (fa[x][i] != fa[y][i])<br>            x = fa[x][i], y = fa[y][i];<br>    <span class="hljs-keyword">return</span> fa[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        e[x].<span class="hljs-built_in">push_back</span>(y);<br>        e[y].<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        cout &lt;&lt; dep[x] + dep[y] - <span class="hljs-number">2</span> * dep[<span class="hljs-built_in">lca</span>(x, y)] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500005</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, q;<br><span class="hljs-keyword">int</span> siz[N], dep[N], fa[N], son[N], top[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    siz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[v])<br>            <span class="hljs-keyword">continue</span>;<br>        dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>        fa[v] = u;<br>        <span class="hljs-built_in">dfs1</span>(v);<br>        siz[u] += siz[v];<br>        <span class="hljs-keyword">if</span> (siz[v] &gt; siz[son[u]])<br>            son[u] = v;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> topf)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[u] = topf;<br>    <span class="hljs-keyword">if</span> (!son[u])<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs2</span>(son[u], topf);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : e[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v == fa[u] || v == son[u])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(v, v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (top[x] != top[y])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]])<br>            <span class="hljs-built_in">swap</span>(x, y);<br>        x = fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">return</span> dep[x] &lt; dep[y] ? x : y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> dep[x] - <span class="hljs-number">1</span> + dep[y] - <span class="hljs-number">1</span> - <span class="hljs-number">2</span> * (dep[<span class="hljs-built_in">lca</span>(x, y)] - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    fa[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        e[x].<span class="hljs-built_in">push_back</span>(y);<br>        e[y].<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= q; i++)<br>    &#123;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        cout &lt;&lt; <span class="hljs-built_in">dis</span>(x, y) &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x == fa[x] ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]); &#125;<br></code></pre></div></td></tr></table></figure><h3 id="ST-表"><a href="#ST-表" class="headerlink" title="ST 表"></a>ST 表</h3><p>143</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> L 20</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">int</span> n, m, a[N], st[N][L], lg[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    lg[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        lg[i] = lg[i &gt;&gt; <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>        st[i][<span class="hljs-number">0</span>] = a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j + <span class="hljs-number">1</span> &lt; L; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; (j + <span class="hljs-number">1</span>)) - <span class="hljs-number">1</span> &lt;= n; i++)<br>            st[i][j + <span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(st[i][j], st[i + (<span class="hljs-number">1</span> &lt;&lt; j)][j]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> g = lg[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(st[l][g], st[r - (<span class="hljs-number">1</span> &lt;&lt; g) + <span class="hljs-number">1</span>][g]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-built_in">pre_work</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, l, r; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        cout &lt;&lt; <span class="hljs-built_in">query</span>(l, r) &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><p>104</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> c[N], n, q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; x; x -= x &amp; -x)<br>        res += c[x];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (; x &lt;= n; x += x &amp; -x)<br>        c[x] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; i++)<br>        cin &gt;&gt; x, <span class="hljs-built_in">upd</span>(i, x);<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> op, a, b;<br>        cin &gt;&gt; op &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">upd</span>(a, b);<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-built_in">qry</span>(b) - <span class="hljs-built_in">qry</span>(a - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p>2530</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n, a[N], q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegmentTree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> len (r - l + 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> root 1, 1, n</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> now pos, l, r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br>    <span class="hljs-keyword">int</span> tr[N &lt;&lt; <span class="hljs-number">2</span>], tag[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span> </span>&#123; tr[pos] = tr[lpos] + tr[rpos]; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ntg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        tr[pos] += len * v;<br>        tag[pos] += v;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (tag[pos])<br>            <span class="hljs-built_in">ntg</span>(lson, tag[pos]), <span class="hljs-built_in">ntg</span>(rson, tag[pos]), tag[pos] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bld</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span> tr[pos] = a[l], <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">bld</span>(lson), <span class="hljs-built_in">bld</span>(rson), <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">ntg</span>(now, v), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">if</span> (L &lt;= mid)<br>            <span class="hljs-built_in">upd</span>(lson, L, R, v);<br>        <span class="hljs-keyword">if</span> (R &gt; mid)<br>            <span class="hljs-built_in">upd</span>(rson, L, R, v);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> tr[pos];<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">if</span> (R &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R);<br>        <span class="hljs-keyword">if</span> (L &gt; mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(rson, L, R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R) + <span class="hljs-built_in">qry</span>(rson, L, R);<br>    &#125;<br>&#125; T;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    T.<span class="hljs-built_in">bld</span>(root);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>    &#123;<br>        string s;<br>        cin &gt;&gt; s;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;Add&quot;</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> l, r, v;<br>            cin &gt;&gt; l &gt;&gt; r &gt;&gt; v;<br>            T.<span class="hljs-built_in">upd</span>(root, l, r, v);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> l, r;<br>            cin &gt;&gt; l &gt;&gt; r;<br>            cout &lt;&lt; T.<span class="hljs-built_in">qry</span>(root, l, r) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="树链剖分-1"><a href="#树链剖分-1" class="headerlink" title="树链剖分"></a>树链剖分</h3><p>13151</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> root 1, 1, n</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> len (r - l + 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> now pos, l, r</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, fa[N], son[N], top[N], siz[N], dep[N], dfn[N], tot, q;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    siz[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : e[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (fa[i] != <span class="hljs-number">-2</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        fa[i] = x;<br>        dep[i] = dep[x] + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">dfs1</span>(i);<br>        siz[x] += siz[i];<br>        <span class="hljs-keyword">if</span> (siz[i] &gt; siz[son[x]] || !son[x])<br>            son[x] = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> topf)</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[x] = ++tot;<br>    top[x] = topf;<br>    <span class="hljs-keyword">if</span> (!son[x])<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">dfs2</span>(son[x], topf);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : e[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == fa[x] || i == son[x])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(i, i);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> tr[N &lt;&lt; <span class="hljs-number">2</span>], tag[N &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span> </span>&#123; tr[pos] = tr[lpos] + tr[rpos]; &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ntg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    tag[pos] = val, tr[pos] = len * val;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">ntg</span>(lson, tag[pos]), <span class="hljs-built_in">ntg</span>(rson, tag[pos]), tag[pos] = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ntg</span>(now, val), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>    <span class="hljs-keyword">if</span> (tag[pos] != <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">psd</span>(now);<br>    <span class="hljs-keyword">if</span> (L &lt;= mid)<br>        <span class="hljs-built_in">upd</span>(lson, L, R, val);<br>    <span class="hljs-keyword">if</span> (R &gt; mid)<br>        <span class="hljs-built_in">upd</span>(rson, L, R, val);<br>    <span class="hljs-built_in">psu</span>(pos);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>        <span class="hljs-keyword">return</span> tr[pos];<br>    <span class="hljs-keyword">if</span> (tag[pos] != <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">psd</span>(now);<br>    <span class="hljs-keyword">if</span> (L &gt; mid)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(rson, L, R);<br>    <span class="hljs-keyword">if</span> (R &lt;= mid)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R) + <span class="hljs-built_in">qry</span>(rson, L, R);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">install</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fr = x, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> sjb = top[fr];<br>        res += <span class="hljs-built_in">qry</span>(root, dfn[sjb], dfn[fr]);<br>        <span class="hljs-built_in">upd</span>(root, dfn[sjb], dfn[fr], <span class="hljs-number">1</span>);<br>        fr = fa[sjb];<br>    &#125; <span class="hljs-keyword">while</span> (fr != <span class="hljs-number">-1</span>);<br>    cout &lt;&lt; dep[x] - res &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uninstall</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-built_in">qry</span>(root, dfn[x], dfn[x] + siz[x] - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    <span class="hljs-built_in">upd</span>(root, dfn[x], dfn[x] + siz[x] - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; x;<br>        e[i].<span class="hljs-built_in">push_back</span>(x);<br>        e[x].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>        fa[i] = <span class="hljs-number">-2</span>;<br>    fa[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    dep[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(tag, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(tag));<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= q; i++)<br>    &#123;<br>        string s;<br>        cin &gt;&gt; s &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;install&quot;</span>)<br>            <span class="hljs-built_in">install</span>(x);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">uninstall</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><h4 id="fhq-Treap"><a href="#fhq-Treap" class="headerlink" title="fhq_Treap"></a>fhq_Treap</h4><p>198-A</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fhq_Treap</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls lson[pos]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs rson[pos]</span><br>    <span class="hljs-keyword">int</span> lson[N], rson[N], val[N], rnd[N], siz[N], rt, tot;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mlc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        val[++tot] = v;<br>        siz[tot] = <span class="hljs-number">1</span>;<br>        rnd[tot] = <span class="hljs-built_in">rand</span>();<br>        <span class="hljs-keyword">return</span> tot;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span> </span>&#123; siz[pos] = siz[ls] + siz[rs] + <span class="hljs-number">1</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spl_v</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!pos)<br>            <span class="hljs-keyword">return</span> x = y = <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-keyword">if</span> (val[pos] &lt;= key)<br>            x = pos, <span class="hljs-built_in">spl_v</span>(rs, key, rs, y);<br>        <span class="hljs-keyword">else</span><br>            y = pos, <span class="hljs-built_in">spl_v</span>(ls, key, x, ls);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spl_r</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!pos)<br>            <span class="hljs-keyword">return</span> x = y = <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-keyword">if</span> (siz[ls] &lt; key)<br>            x = pos, <span class="hljs-built_in">spl_r</span>(rs, key - siz[ls] - <span class="hljs-number">1</span>, rs, y);<br>        <span class="hljs-keyword">else</span><br>            y = pos, <span class="hljs-built_in">spl_r</span>(ls, key, x, ls);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mrg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span> || y == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> x + y;<br>        <span class="hljs-keyword">if</span> (rnd[x] &gt; rnd[y])<br>            <span class="hljs-keyword">return</span> rson[x] = <span class="hljs-built_in">mrg</span>(rson[x], y), <span class="hljs-built_in">psu</span>(x), x;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> lson[y] = <span class="hljs-built_in">mrg</span>(x, lson[y]), <span class="hljs-built_in">psu</span>(y), y;<br>    &#125;<br>    <span class="hljs-keyword">int</span> a, b, c, d;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>&#123; <span class="hljs-built_in">spl_v</span>(rt, v, a, b), rt = <span class="hljs-built_in">mrg</span>(<span class="hljs-built_in">mrg</span>(a, <span class="hljs-built_in">mlc</span>(v)), b); &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">spl_v</span>(rt, v - <span class="hljs-number">1</span>, a, b), <span class="hljs-built_in">spl_v</span>(b, v, c, d);<br>        c = <span class="hljs-built_in">mrg</span>(lson[c], rson[c]), rt = <span class="hljs-built_in">mrg</span>(<span class="hljs-built_in">mrg</span>(a, c), d);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rnk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">spl_v</span>(rt, v - <span class="hljs-number">1</span>, a, b), c = siz[a] + <span class="hljs-number">1</span>;<br>        rt = <span class="hljs-built_in">mrg</span>(a, b);<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">spl_r</span>(rt, k - <span class="hljs-number">1</span>, a, b), <span class="hljs-built_in">spl_r</span>(b, <span class="hljs-number">1</span>, c, d);<br>        b = val[c], rt = <span class="hljs-built_in">mrg</span>(<span class="hljs-built_in">mrg</span>(a, c), d);<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">spl_v</span>(rt, v - <span class="hljs-number">1</span>, a, b), <span class="hljs-built_in">spl_r</span>(a, siz[a] - <span class="hljs-number">1</span>, c, d);<br>        a = val[d], rt = <span class="hljs-built_in">mrg</span>(<span class="hljs-built_in">mrg</span>(c, d), b);<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">suc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">spl_v</span>(rt, v, a, b), <span class="hljs-built_in">spl_r</span>(b, <span class="hljs-number">1</span>, c, d);<br>        b = val[c], rt = <span class="hljs-built_in">mrg</span>(<span class="hljs-built_in">mrg</span>(a, c), d);<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-number">20070423</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, op, x; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; op &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>            T.<span class="hljs-built_in">ins</span>(x);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>            T.<span class="hljs-built_in">del</span>(x);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)<br>            cout &lt;&lt; T.<span class="hljs-built_in">rnk</span>(x) &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">4</span>)<br>            cout &lt;&lt; T.<span class="hljs-built_in">kth</span>(x) &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">5</span>)<br>            cout &lt;&lt; T.<span class="hljs-built_in">pre</span>(x) &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">6</span>)<br>            cout &lt;&lt; T.<span class="hljs-built_in">suc</span>(x) &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><h4 id="普通-Trie"><a href="#普通-Trie" class="headerlink" title="普通 Trie"></a>普通 Trie</h4><p>201-A</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 570005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> rt = <span class="hljs-number">1</span>, tot = <span class="hljs-number">1</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> c[<span class="hljs-number">256</span>], tag;<br>    &#125; a[N];<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> pos = rt, val;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); i++)<br>        &#123;<br>            val = s[i];<br>            <span class="hljs-keyword">if</span> (a[pos].c[val] == <span class="hljs-number">0</span>)<br>                a[pos].c[val] = ++tot;<br>            pos = a[pos].c[val];<br>        &#125;<br>        a[pos].tag++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> pos = rt, val;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); i++)<br>        &#123;<br>            val = s[i];<br>            <span class="hljs-keyword">if</span> (a[pos].c[val] == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            pos = a[pos].c[val];<br>        &#125;<br>        <span class="hljs-keyword">return</span> a[pos].tag;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        string s;<br>        cin &gt;&gt; s;<br>        <span class="hljs-keyword">char</span> c;<br>        c = <span class="hljs-built_in">getchar</span>();<br>        string t;<br>        <span class="hljs-built_in">getline</span>(cin, t);<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;add&quot;</span>)<br>            T.<span class="hljs-built_in">ins</span>(t);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (T.<span class="hljs-built_in">find</span>(t) != <span class="hljs-number">-1</span>)<br>                cout &lt;&lt; <span class="hljs-string">&quot;yes\n&quot;</span>;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;no\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="01-Trie"><a href="#01-Trie" class="headerlink" title="01-Trie"></a>01-Trie</h4><p>201-E</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10000005</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie_01</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> rt = <span class="hljs-number">1</span>, tot = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> a[N][<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>, pos = rt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> val = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (a[pos][!val])<br>                ans += <span class="hljs-number">1</span> &lt;&lt; i, pos = a[pos][!val];<br>            <span class="hljs-keyword">else</span><br>                pos = a[pos][val];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> pos = rt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> val = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (a[pos][val])<br>                pos = a[pos][val];<br>            <span class="hljs-keyword">else</span><br>                pos = a[pos][val] = ++tot;<br>        &#125;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-keyword">int</span> n, fr;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; x;<br>        fr = <span class="hljs-built_in">max</span>(fr, T.<span class="hljs-built_in">find</span>(x));<br>        T.<span class="hljs-built_in">ins</span>(x);<br>    &#125;<br>    cout &lt;&lt; fr;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模板/学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「187-R」Sparse Table A</title>
      <link href="/2021/08/13/187-R/"/>
      <url>/2021/08/13/187-R/</url>
      
        <content type="html"><![CDATA[<p>先用 ST 表预处理出区间 $\min$ 和区间 $\gcd$。<br>二分区间长度，<code>check</code> 时枚举左端点，判断该区间 $\gcd$ 是否 $=\min$。<br>$n\leq 5\times 10^5$ 时，$L$ 要取到 19，不然最后一个点会 <font color=red><b>Wrong Answer</b></font> 。<br>$O(n \log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> L 19</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n, m, a[N], st[N][L], st1[N][L], lg[N], ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> y ? <span class="hljs-built_in">gcd</span>(y, x % y) : x; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    lg[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        lg[i] = lg[i &gt;&gt; <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>        st[i][<span class="hljs-number">0</span>] = st1[i][<span class="hljs-number">0</span>] = a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j + <span class="hljs-number">1</span> &lt; L; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; (j + <span class="hljs-number">1</span>)) - <span class="hljs-number">1</span> &lt;= n; i++)<br>            st[i][j + <span class="hljs-number">1</span>] = std::<span class="hljs-built_in">min</span>(st[i][j], st[i + (<span class="hljs-number">1</span> &lt;&lt; j)][j]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j + <span class="hljs-number">1</span> &lt; L; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; (j + <span class="hljs-number">1</span>)) - <span class="hljs-number">1</span> &lt;= n; i++)<br>            st1[i][j + <span class="hljs-number">1</span>] = <span class="hljs-built_in">gcd</span>(st1[i][j], st1[i + (<span class="hljs-number">1</span> &lt;&lt; j)][j]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> g = lg[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">min</span>(st[l][g], st[r - (<span class="hljs-number">1</span> &lt;&lt; g) + <span class="hljs-number">1</span>][g]) == <span class="hljs-built_in">gcd</span>(st1[l][g], st1[r - (<span class="hljs-number">1</span> &lt;&lt; g) + <span class="hljs-number">1</span>][g]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - x + <span class="hljs-number">1</span>; i++)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(i, i + x - <span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">binary</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>        &#123;<br>            ans = mid;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-built_in">pre_work</span>();<br>    <span class="hljs-built_in">binary</span>();<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> ST 表 </tag>
            
            <tag> 二分答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「#35006」旅游</title>
      <link href="/2021/08/11/35006/"/>
      <url>/2021/08/11/35006/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1505">传送门</a></p><p>树链剖分+线段树。</p><p>其实这题就是树链剖分板子题，<del>只不过代码量多了亿点点</del></p><p>说几个注意事项吧：</p><ul><li>本题维护的是边权，需要把边权放到这条边两个点深度较大的那个点的点权上，这样能保证每个点都只存一条边。</li><li>写线段树的时候，把区间和、最大值、最小值（$sum$，$mx$，$mn$）打包到结构体里，重载一下 <code>+</code> 运算符，可大大减少码量。</li><li>单点修改也要下放反转标记，而且修改时消灭反转标记。</li><li>反转标记下放时，把当前区间标记取反，<code>sum^=1</code>，<code>mx=-mn</code>，<code>mn=-mx</code>。</li></ul><p>代码：（第一个突破 $200$ 行的</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 0x3f3f3f3f</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n, a[N], m;<br><br><span class="hljs-keyword">namespace</span> SegmentTree<br>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> len (r - l + 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> root 1, 1, n</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> now pos, l, r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lpos pos &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rpos lpos | 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson lpos, l, mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rpos, mid + 1, r</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> mx, mn, sum;<br>        <span class="hljs-built_in">node</span>() &#123; mx = -inf, mn = inf, sum = <span class="hljs-number">0</span>; &#125;<br>        <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> val) &#123; sum = mx = mn = val; &#125;<br>        node <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> node &amp;a) <span class="hljs-keyword">const</span><br>        &#123;<br>            node res;<br>            res.mx = <span class="hljs-built_in">max</span>(mx, a.mx);<br>            res.mn = <span class="hljs-built_in">min</span>(mn, a.mn);<br>            res.sum = sum + a.sum;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125; tr[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">bool</span> tag[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span> </span>&#123; tr[pos] = tr[lpos] + tr[rpos]; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ntg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        tag[pos] ^= <span class="hljs-number">1</span>;<br>        tr[pos].sum = -tr[pos].sum;<br>        <span class="hljs-built_in">swap</span>(tr[pos].mx, tr[pos].mn);<br>        tr[pos].mx = -tr[pos].mx;<br>        tr[pos].mn = -tr[pos].mn;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (tag[pos])<br>            <span class="hljs-built_in">ntg</span>(lson), <span class="hljs-built_in">ntg</span>(rson), tag[pos] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bld</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span> tr[pos] = a[l], <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">bld</span>(lson), <span class="hljs-built_in">bld</span>(rson), <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span> tr[pos] = v, tag[pos] = <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">if</span> (p &lt;= mid)<br>            <span class="hljs-built_in">upd</span>(lson, p, v);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">upd</span>(rson, p, v);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">ntg</span>(now), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">if</span> (L &lt;= mid)<br>            <span class="hljs-built_in">flp</span>(lson, L, R);<br>        <span class="hljs-keyword">if</span> (R &gt; mid)<br>            <span class="hljs-built_in">flp</span>(rson, L, R);<br>        <span class="hljs-built_in">psu</span>(pos);<br>    &#125;<br>    <span class="hljs-function">node <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<br>            <span class="hljs-keyword">return</span> tr[pos];<br>        <span class="hljs-built_in">psd</span>(now);<br>        <span class="hljs-keyword">if</span> (R &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R);<br>        <span class="hljs-keyword">if</span> (L &gt; mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(rson, L, R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(lson, L, R) + <span class="hljs-built_in">qry</span>(rson, L, R);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> SegmentTree;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v;<br>&#125; e1[N];<br>vector&lt;edge&gt; e[N];<br><span class="hljs-keyword">int</span> tot, siz[N], fa[N], son[N], dep[N], top[N], dfn[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    siz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (edge i : e[u])<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = i.v;<br>        <span class="hljs-keyword">if</span> (dep[v])<br>            <span class="hljs-keyword">continue</span>;<br>        fa[v] = u;<br>        dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">dfs1</span>(v);<br>        siz[u] += siz[v];<br>        <span class="hljs-keyword">if</span> (siz[son[u]] &lt; siz[v])<br>            son[u] = v;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> topf)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[u] = topf;<br>    dfn[u] = ++tot;<br>    <span class="hljs-keyword">if</span> (son[u])<br>        <span class="hljs-built_in">dfs2</span>(son[u], topf);<br>    <span class="hljs-keyword">for</span> (edge i : e[u])<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = i.v;<br>        <span class="hljs-keyword">if</span> (v == fa[u])<br>            a[dfn[u]] = i.w;<br>        <span class="hljs-keyword">if</span> (v != fa[u] &amp;&amp; v != son[u])<br>            <span class="hljs-built_in">dfs2</span>(v, v);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mdf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    x = dep[e1[i].u] &gt; dep[e1[i].v] ? e1[i].u : e1[i].v;<br>    <span class="hljs-built_in">upd</span>(root, dfn[x], v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (top[x] != top[y])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]])<br>            <span class="hljs-built_in">swap</span>(x, y);<br>        <span class="hljs-built_in">flp</span>(root, dfn[top[x]], dfn[x]);<br>        x = fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x == y)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (dep[x] &gt; dep[y])<br>        <span class="hljs-built_in">swap</span>(x, y);<br>    <span class="hljs-built_in">flp</span>(root, dfn[son[x]], dfn[y]);<br>&#125;<br><span class="hljs-function">node <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    node res;<br>    <span class="hljs-keyword">while</span> (top[x] != top[y])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]])<br>            <span class="hljs-built_in">swap</span>(x, y);<br>        res = res + <span class="hljs-built_in">qry</span>(root, dfn[top[x]], dfn[x]);<br>        x = fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x == y)<br>        <span class="hljs-keyword">return</span> res;<br>    <span class="hljs-keyword">if</span> (dep[x] &gt; dep[y])<br>        <span class="hljs-built_in">swap</span>(x, y);<br>    res = res + <span class="hljs-built_in">qry</span>(root, dfn[son[x]], dfn[y]);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>        e[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>        e1[i] = &#123;u, v&#125;;<br>    &#125;<br>    dep[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">bld</span>(root);<br>    cin &gt;&gt; m;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        string s;<br>        <span class="hljs-keyword">int</span> x, y;<br>        cin &gt;&gt; s &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;C&quot;</span>)<br>            <span class="hljs-built_in">mdf</span>(x, y);<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;N&quot;</span>)<br>            <span class="hljs-built_in">flip</span>(x, y);<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;SUM&quot;</span>)<br>            cout &lt;&lt; <span class="hljs-built_in">ask</span>(x, y).sum &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;MAX&quot;</span>)<br>            cout &lt;&lt; <span class="hljs-built_in">ask</span>(x, y).mx &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;MIN&quot;</span>)<br>            cout &lt;&lt; <span class="hljs-built_in">ask</span>(x, y).mn &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
